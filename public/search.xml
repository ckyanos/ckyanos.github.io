<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vector]]></title>
    <url>%2F2019%2F10%2F08%2Fvector%2F</url>
    <content type="text"><![CDATA[定义向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。 vector的使用方法1234#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;vector&lt;int&gt;V; 返回向量个数:1return V.size(); 在向量末尾添加元素:1V.push_back(x); 删除向量最后一个元素:1V.pop_back(); 返回指向向量开头的迭代器:1return V.begin(); 返回指向向量末尾的迭代器:1return V.end(); 在向量的位置 p 处 插入元素 x:1V.insert(p, x); 删除向量位置 p 处 的元素:1V.erase(p); 删除向量中所有元素:1V.clear();]]></content>
      <categories>
        <category>基本数据结构</category>
      </categories>
      <tags>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[队列]]></title>
    <url>%2F2019%2F10%2F08%2F%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[定义队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。 数组实现1234567891011const int N = 1e6 + 10;int q[N], head, tail;inline void push(int x) &#123; q[++tail] = x;&#125;inline int top() &#123; return q[tail];&#125;inline void pop(int x) &#123; head++;&#125; STL实现1234#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;queue&lt;int&gt; q; 入队:1q.push(x); 出队:1q.pop(); 返回队头：1int x = q.front(); 返回队列的大小1int SIZE = q.size(); 判断是否为空1234inline bool is_empty() &#123; if(q.empty())return true; return false;&#125;]]></content>
      <categories>
        <category>基本数据结构</category>
      </categories>
      <tags>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[链表]]></title>
    <url>%2F2019%2F10%2F08%2F%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[定义链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到 $O(1)$ 的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是 $O(logn)$ 和 $O(1)$ 。 数组实现123```#### 指针实现```c++ STL实现1234#include&lt;iostream&gt;#include&lt;list&gt;using namespace std;vector&lt;int&gt;V; 返回元素个数:1return V.size(); 在链表开头添加元素:1V.push_front(x); 在链表末尾添加元素:1V.push_back(x); 删除表头元素:1V.pop_front(); 删除表末尾元素:1V.pop_back(); 在表的位置 p 处 插入元素 x:1V.insert(p, x); 删除表中位置 p 处 的元素:1V.erase(p); 删除向量中所有元素:1V.clear();]]></content>
      <categories>
        <category>基本数据结构</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[优先队列]]></title>
    <url>%2F2019%2F10%2F08%2F%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[定义优先队列(priority queue)普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出 （first in, largest out）的行为特征。通常采用堆数据结构来实现。 数组实现12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 1e6 + 10;int heap[N], n;inline void up(int p) &#123; while(p &gt; 1) &#123; if(heap[p] &gt; heap[p / 2]) &#123; swap(heap[o], heap[p / 2]); p /= 2; &#125; &#125;&#125;inline void down(int p) &#123; int s = p * 2; if(s &lt; n &amp;&amp; heap[s] &lt; heap[s + 1])s++; while(s &lt;= n) &#123; if(heap[s] &gt; heap[n]) &#123; swap(heap[s], heap[p]); p = s; s = p * 2; &#125; else break; &#125;&#125; top123inline int gettop() &#123; return heap[1];&#125; pop()inline void pop() { heap[1] = heap[n—]; down(1);} STL12345#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;priority_queue&lt;int&gt;q;//大根堆priority_queue&lt;int,vector&lt;int&gt;, greater&lt;int&gt; &gt; q; 入队:1q.push(x); 出队:1q.pop(); 返回队头：1int x = q.top(); 返回队列的大小1int SIZE = q.size(); 判断是否为空1234inline bool is_empty() &#123; if(q.empty())return true; return false;&#125;]]></content>
      <categories>
        <category>基本数据结构</category>
      </categories>
      <tags>
        <tag>优先队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速幂]]></title>
    <url>%2F2019%2F10%2F08%2F%E5%BF%AB%E9%80%9F%E5%B9%82%2F</url>
    <content type="text"><![CDATA[介绍顾名思义，快速幂就是快速算底数的 $n$ 次幂。其时间复杂度为 $O(log₂N)$， 与朴素的 $O(N)$ 相比效率有了极大的提高。(N 为幂)$x^{b} % mod$ 非递归12345678910const long long mod = 114514;inline long long mod_pow(long long x, long long b) &#123; long long res = 1; while(b) &#123; if(n &amp; 1) res = res * x % mod; x = x * x % mod; n &gt;&gt;= 1; &#125; return res;&#125; 递归1234567const long long mod = 114514;inline long long mod_pow(long long x, long long b) &#123; if(b == 0)return 1; long long res = mod_pow(x * x % mod, n / 2); if(n &amp; 1) res = res * x % mod; return res;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[栈]]></title>
    <url>%2F2019%2F10%2F08%2F%E6%A0%88%2F</url>
    <content type="text"><![CDATA[定义栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为先进后出表。 数组实现1234567891011const int N = 1e6 + 10;int q[N], tot;inline void push(int x) &#123; q[++tot] = x;&#125;inline int top() &#123; return q[tot];&#125;inline void pop(int x) &#123; tot--;&#125; STL1234#include&lt;iostream&gt;#include&lt;stack&gt;using namespace std;stack&lt;int&gt; q; 压栈:1q.push(x); 弹栈:1q.pop(); 返回栈顶：1int x = q.top(); 返回栈的大小1int SIZE = q.size(); 判断是否为空1234inline bool is_empty() &#123; if(q.empty())return true; return false;&#125;]]></content>
      <categories>
        <category>基本数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[质数]]></title>
    <url>%2F2019%2F10%2F08%2F%E8%B4%A8%E6%95%B0%2F</url>
    <content type="text"><![CDATA[定义质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数；否则称为合数。 质数检验普通12345678inline bool prime(int n) &#123; if(n &lt; 2)return false; if(n == 2)return true; for(int i = 2; i * i &lt;= n; i++) &#123; if(n % i == 0)return false; &#125; return true;&#125; 简单优化123456789inline bool prime(int n) &#123; if(n &lt; 2)return false; if(n == 2)return true; if(n % 2 == 0)return false; for(int i = 3; i * i &lt;= n; i++) &#123; if(n % i == 0)return false; &#125; return true;&#125; 质数表埃氏筛法1234567891011bool v[N];inline int prime(int n) &#123; memset(v, true, v); v[0] = v[1] = 0; for(int i = 2; i &lt;= n; i++) &#123; if(!v[i])continue; for(int j = i + i; j &lt;= n; j+= i) &#123; v[j] = false; &#125; &#125;&#125; 欧拉筛法]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>质数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约数]]></title>
    <url>%2F2019%2F10%2F08%2F%E7%BA%A6%E6%95%B0%2F</url>
    <content type="text"><![CDATA[定义约数，又称因数。整数a除以整数b(b≠0) 除得的商正好是整数而没有余数，我们就说a能被b整除，或b能整除a。a称为b的倍数，b称为a的约数。在大学之前，”约数”一词所指的一般只限于正约数。约数和倍数都是二元关系的概念，不能孤立地说某个整数是约数或倍数。一个整数的约数是有限的。同时，它可以在特定情况下成为公约数。 欧几里得算法(辗转相除法)循环写法1234567891011inline int gcd(int a, int b) &#123; if(a &lt; b)swap(a, b); int res = 0; while(b) &#123; res = a % b; a = b; b = res; &#125; return b;&#125; 递归写法1234inline int gcd(int a, int b) &#123; return b ? gcd(b, a % b) : a;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>约数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[烽火传递]]></title>
    <url>%2F2019%2F09%2F25%2F%E7%83%BD%E7%81%AB%E4%BC%A0%E9%80%92%2F</url>
    <content type="text"><![CDATA[题目描述烽火台是重要的军事防御设施，一般建在交通要道或险要处。一旦有军情发生，则白天用浓烟，晚上有火光传递军情。 在某两个城市之间有 $n$ 座烽火台，每个烽火台发出信号都有一定的代价。为了使情报准确传递，在连续 $m$ 个烽火台中至少要有一个发出信号。现在输入 $n,m$ 和每个烽火台的代价，请计算总共最少的代价在两城市之间来准确传递情报。 Input第一行是 $n,m$，表示 $n$ 个烽火台和连续烽火台数 $m$； 第二行 $n$ 个整数表示每个烽火台的代价 $a_i$。 Output输出仅一个整数，表示最小代价。 样例输入125 31 2 5 6 2 样例输出14 样例说明在第 $2,5$ 号烽火台上发信号。 数据范围对于全部数据，$1\le n,m\le 2\times 10^5,1\le a_i\le 1000$。 Code:50分：12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;const int MAX_N = 1e6 + 10;const int INF = 99999999;int a[MAX_N], f[MAX_N];int n, m, ans = 99999999, cnt;int main() &#123; scanf("%d%d", &amp;n, &amp;m); for(int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;a[i]); &#125; for(int i = 1; i &lt;= m; i++) &#123; f[i] = a[i]; &#125; for(int i = m + 1; i &lt;= n; i++) &#123; f[i] = INF; for(int j = i - m; j &lt;= i - 1; j++) &#123; f[i] = std::min(f[j] + a[i], f[i]); &#125; &#125; for(int i = n - m + 1; i &lt;= n; i++)ans = std::min(f[i], ans); printf("%d\n", ans); return 0;&#125; AC:123456789101112131415161718192021222324252627#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int MAX_N = 1e6 + 10;int n, m;int a[MAX_N], f[MAX_N];int q[MAX_N], l, r;int main() &#123; scanf("%d %d", &amp;n, &amp;m); for(int i = 1; i &lt;= n; i++) &#123; scanf("%d" ,&amp;a[i]); &#125; for(int i = 1; i &lt;= n; i++) &#123; while(l &lt;= r &amp;&amp; q[l] &lt; i - m)l++; f[i] = f[q[l]] + a[i]; while(l &lt;= r &amp;&amp; f[q[r]] &gt;= f[i])r--; q[++r] = i; &#125; int ans = 99986465; l = r = 1; for(int i = n - m + 1; i &lt;= n; i++) &#123; ans = min(ans, f[i]); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堆蛋糕]]></title>
    <url>%2F2019%2F08%2F31%2F%E5%A0%86%E8%9B%8B%E7%B3%95%2F</url>
    <content type="text"><![CDATA[题目描述其实moreD是一个十分犀利的蛋糕师。他最喜欢的食物就是蛋糕。 一天，他自己做出了n个圆柱状的蛋糕，每个蛋糕都有一个底面圆的半径Ri。高度都是一样的。 moreD在开始享用他的蛋糕大餐之前忽然觉得，圆柱状的蛋糕没有什么诱惑力。moreD看到了别人结婚用的蛋糕都是很多很多层的，那样的蛋糕才比较给力。但是堆太多层的蛋糕比较困难，于是moreD想要堆出许多三层的蛋糕，再开始自己的蛋糕大餐。 当然，作为蛋糕师，moreD在堆蛋糕的时候不会对蛋糕的形状有任何破坏，而且，moreD希望三层蛋糕的半径从上往下严格递增。这才是一个普通的好蛋糕。 moreD在考虑一个十分重要的问题，最多可以堆出多少三层蛋糕呢？ 输入第一行仅包含一个整数n，表示蛋糕的数量。 接下来n个整数，表示每个蛋糕半径的大小Ri。 输出输出一行仅包含一个整数，表示最多可以做成多少个蛋糕。 Sample Input1261 2 3 4 3 2 Sample Output12 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;cstdio&gt;const int MAX_N = 3e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int CntNum[MAX_N];int CntFirst, CntSecond, ThreePieces, n, ans;int main() &#123; n = read(); ThreePieces = n / 3; for(int i = 1; i &lt;= n; i++) &#123; int x = read(); CntNum[x]++; &#125; for(int i = 1; i &lt;= n; i++) &#123; if(CntNum[i] &gt; CntFirst) &#123; CntSecond = CntFirst; CntFirst = CntNum[i]; &#125; else if(CntNum[i] &gt; CntSecond) &#123; CntSecond = CntNum[i]; &#125; &#125; if(CntFirst &gt; ThreePieces &amp;&amp; CntSecond &lt;= ThreePieces) &#123; ans = (n - CntFirst) / 2; &#125; else if(CntFirst &gt; ThreePieces &amp;&amp; CntSecond &gt; ThreePieces) &#123; ans = n - CntFirst - CntSecond; &#125; else ans = CntFirst; printf("%d\n", ans); return 0; &#125;]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二分笔记]]></title>
    <url>%2F2019%2F08%2F25%2F%E4%BA%8C%E5%88%86%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[引言&nbsp; 二分是一种常用而且非常精妙的算法，常常是我们解决问题的突破口。二分的基本用途是在单调序列或单调函数中做查找操作。因此，当问题的答案具有单调性时，就可以通过二分把求解转化为判定（根据复杂度理论，判定的难度小于求解）。进一步的，我们还可以通过三分解决单峰函数的极值以及相关问题。 二分写法12345678inline int Erfen(int x) &#123; while( l &lt;= r) &#123; int mid = ( l + r) &gt;&gt; 1; if(check(mid))ans = mid, l = mid + 1; else r = mid - 1; &#125; return l;&#125; 二分题型二分查找&nbsp; 用具有单调性的布尔表达式求解分界点，比如在有序数列中求数字$x$的排名。&nbsp;在单调递增序列 a 中查找 ≥x 的数中最小的一个(即x 或 x 的后继)1234567inline Erfen(int x) &#123; while(l &lt; r) &#123; int mid = (l + r) &gt;&gt; 1; if(a[mid] &gt;= x)r = mid; else l = mid + 1; &#125; return a[l];&#125; 在单调递增序列 a 中查找 ≤x 的数中最大的一个(即x 或 x 的前驱)1234567inline Erfen(int x) &#123; while(l &lt; r) &#123; int mid = (l + r + 1) &gt;&gt; 1; if(a[mid] &lt;= x)l = mid; else r = mid - 1; &#125; return a[l];&#125;]]></content>
      <categories>
        <category>read</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[过路费]]></title>
    <url>%2F2019%2F07%2F22%2F%E8%BF%87%E8%B7%AF%E8%B4%B9%2F</url>
    <content type="text"><![CDATA[题目描述在某个遥远的国家里，有n个城市,编号分别为1，2，3，…，n。这个国家的政府修建了m条双向道路，每条道路连接着两个城市。政府规定从城市S到城市T需要收取的过路费为所经过城市之间道路长度的最大值。如：A到B长度为2，B到C长度为3，那么开车从A经过B到C需要上交的过路费为3。 佳佳是个做生意的人，需要经常开车从任意一个城市到另外一个城市，因此他需要频繁地上交过路费，由于忙于做生意，所以他无时间来寻找交过路费最低的行驶路线。然而，当他交的过路费越多他的心情就变得越糟糕。作为秘书的你，需要每次根据佳佳开车的起止城市，提供给他从开始城市到达目标城市，最少需要上交多少过路费。 Input第一行是两个整数n 和m，分别表示城市的个数以及道路的条数。 接下来m行，每行包含三个整数 a，b，w（1≤a，b≤n，0≤w≤109），表示a与b之间有一条长度为w的道路。 接着有一行为一个整数q，表示佳佳发出的询问个数。 再接下来q行，每一行包含两个整数S，T（1≤S,T≤n，S≠T）, 表示开始城市S和目标城市T。 Output输出文件共q行，每行一个整数，分别表示每个询问需要上交的最少过路费用。输入数据保证所有的城市都是连通的。 Sample Input1234567894 51 2 101 3 201 4 1002 4 303 4 1021 44 1 Sample Output122020 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N = 2e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w; &#125;int head[N], Next[N], edge[N], ver[N], tot;int f[N][21], g[N][21], d[N], n, m, root;inline void add(int x, int y, int z) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125;struct node&#123; int a, b, val;&#125;t[N];bool cmp(node A, node B) &#123; return A.val &lt;= B.val;&#125;int fa[N];inline int get(int x) &#123; if(fa[x] == x)return x; return fa[x] = get(fa[x]);&#125;void dfs(int x, int father) &#123; d[x] = d[father] + 1; for(int i = 0; i &lt;= 14; i++) &#123; f[x][i + 1] = f[ f[x][i] ][i]; g[x][i + 1] = max(g[x][i], g[ f[x][i] ][i]); &#125; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(y == father)continue; f[y][0] = x; g[y][0] = z; dfs(y, x); &#125;&#125;int LCA(int x, int y) &#123; int ans = 0; if(d[x] &lt; d[y])swap(x, y); if(x == y)return ans; for(int i = 15; i &gt;= 0; i--) &#123; if(d[f[x][i]] &gt;= d[y]) &#123; ans = max(ans, g[x][i]); x = f[x][i]; if(x == y)return ans; &#125; &#125; for(int i = 15; i &gt;= 0; i--) &#123; if(f[x][i] != f[y][i]) &#123; ans = max(ans, g[x][i]); ans = max(ans, g[y][i]); x = f[x][i]; y = f[y][i]; &#125; &#125; return max(ans, max(g[x][0], g[y][0]));&#125;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= n; i++)fa[i] = i; for(int i = 1; i &lt;= m; i++) &#123; t[i].a = read(), t[i].b = read(), t[i].val = read(); &#125; sort(t + 1, t + 1 + m, cmp); for(int i = 1; i &lt;= m; i++) &#123; int x = get(t[i].a), y = get(t[i].b); if(x == y)continue; fa[x] = y; add(t[i].a, t[i].b, t[i].val); add(t[i].b, t[i].a, t[i].val); &#125; dfs(1, 0); int Q = read(); for(int i = 1; i &lt;= Q; i++) &#123; int x = read(), y = read(); printf("%d\n", LCA(x, y)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>LCA</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[铺设道路]]></title>
    <url>%2F2019%2F07%2F14%2F%E9%93%BA%E8%AE%BE%E9%81%93%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[题目描述春春是一名道路工程师，负责铺设一条长度为 n 的道路。 铺设道路的主要工作是填平下陷的地表。整段道路可以看作是 n 块首尾相连的区域，一开始，第 i 块区域下陷的深度为 di。 春春每天可以选择一段连续区间 [L, R] ，填充这段区间中的每块区域，让其下陷深度减少 1。在选择区间时，需要保证，区间内的每块区域在填充前下陷深度均不为 0 。春春希望你能帮他设计一种方案，可以在最短的时间内将整段道路的下陷深度都变为 0 。 输入格式输入文件包含两行，第一行包含一个整数 n，表示道路的长度。 第二行包含 n 个整数，相邻两数间用一个空格隔开，第 i 个整数为 di 。 输出格式输出文件仅包含一个整数，即最少需要多少天才能完成任务。 Sample Input1264 3 2 5 3 5 Sample Output19 Code：12345678910111213141516171819202122232425262728#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt; #include&lt;cmath&gt;using namespace std;const int MAX_N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int n, x, y, ans;int main()&#123; freopen("road.in", "r", stdin); freopen("road.out", "w", stdout); n = read(); for(int i = 1; i &lt;= n; i++) &#123; x = read(); if(x &gt; y)ans += x - y; swap(x, y); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>noip2018复盘</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>noip2018</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[货币系统]]></title>
    <url>%2F2019%2F07%2F13%2F%E8%B4%A7%E5%B8%81%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[题目描述在网友的国度中共有 n 种不同面额的货币，第 i 种货币的面额为 a[i]，你可以假设每一种货币都有无穷多张。为了方便，我们把货币种数为 n、面额数组为 a[1..n]的货币系统记作 (n,a)。在一个完善的货币系统中，每一个非负整数的金额 x 都应该可以被表示出，即对每一个非负整数 x，都存在 n 个非负整数 t[i] 满足 a[i]× t[i] 的和为 x。然而，在网友的国度中，货币系统可能是不完善的，即可能存在金额 x 不能被该货币系统表示出。例如在货币系统 n=3, a=[2,5,9] 中，金额 1,3 就无法被表示出来。两个货币系统 (n,a) 和 (m,b) 是等价的，当且仅当对于任意非负整数 x，它要么均可以被两个货币系统表出，要么不能被其中任何一个表出。现在网友们打算简化一下货币系统。他们希望找到一个货币系统 (m,b)，满足(m,b) 与原来的货币系统 (n,a) 等价，且 m 尽可能的小。他们希望你来协助完成这个艰巨的任务：找到最小的 m。 输入格式输入文件的第一行包含一个整数 T，表示数据的组数。接下来按照如下格式分别给出 T 组数据。每组数据的第一行包含一个正整数 n。接下来一行包含 n 个由空格隔开的正整数a[i]。 输出格式输出文件共有 T 行，对于每组数据，输出一行一个正整数，表示所有与 (n,a) 等价的货币系统 (m,b) 中，最小的 m。 Sample Input12345243 19 10 6511 29 13 19 17 Sample Output1225 数据范围与提示在第一组数据中，货币系统 (2, [3,10]) 和给出的货币系统 (n, a) 等价，并可以验证不存在 m &lt; 2 的等价的货币系统，因此答案为 2。在第二组数据中，可以验证不存在 m &lt; n 的等价的货币系统，因此答案为 5。 对于 100% 的数据，满足 1 ≤ T ≤ 20, n,a[i] ≥ 1。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt; #include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;const int MAX_N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int T, a[MAX_N], b[MAX_N], n, m;bool v[MAX_N];int main() &#123; freopen("money.in", "r", stdin); freopen("money.out", "w", stdout); T = read(); while(T--) &#123; int ans = 0; memset(a, 0 ,sizeof(a)); memset(b, 0 ,sizeof(b)); memset(v, 0 ,sizeof(v)); n = read(); for(int i = 1; i &lt;= n; i++)a[i] = read(); sort(a + 1, a + 1 + n); if(a[1] == 1) &#123; printf("1\n"); continue; &#125; for(int i = 1; i &lt;= n; i++) &#123; if(v[a[i]])continue; v[a[i]] = 1; for(int j = 1; j + a[i] &lt;= a[n]; j++) &#123; if(!v[j])continue; v[a[i] + j] = 1; &#125; ans++; &#125; printf("%d\n", ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>noip2018复盘</category>
      </categories>
      <tags>
        <tag>筛法</tag>
        <tag>noip2018</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树的直径]]></title>
    <url>%2F2019%2F07%2F13%2F%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%2F</url>
    <content type="text"><![CDATA[给定一棵树，树中每条边都有一个权值，树中两点之间的距离定义为连接两点的路径边权之和。树中最远的两个节点之间的距离被称为树的直径，连接这两点的路径被称为树的最长链。后者通常也可称为直径，即直径是一个数值概念，也可代指一条路径。树的直径通常有两种求法，时间复杂度均为O(n)。 dp求树的直径12345678910void dp(int x) &#123; v[x] = 1; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(v[y])continue; dp(y); ans = max(ans, d[x] + d[y] + z); d[x] = max(d[x], d[y] + z); &#125;&#125; BFS求树的直径12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;queue&gt;using namespace std;const int N = 1e6 + 10;const int INF = 1061109567;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w= -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int head[N], ver[N], Next[N], edge[N], tot;int v[N], d[N];inline void add(int x, int y, int z) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125;int pos, ans;inline void bfs(int s) &#123; memset(d, 0, sizeof(d)); memset(v, 0, sizeof(v)); queue&lt;int&gt;q; q.push(s); v[s] = 1; while(q.size()) &#123; int x = q.front(); q.pop(); for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(v[y])continue; v[y] = 1; d[y] = d[x] + z; q.push(y); &#125; pos = x; &#125;&#125;int n, m;int main() &#123; n = read(); for(int i = 1; i &lt; n; i++) &#123; int x = read(), y = read(), z = 1; add(x, y, z); add(y, x, z); &#125; bfs(1); bfs(pos); printf("%d\n", d[pos]); return 0;&#125;]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>树的直径</tag>
        <tag>图论</tag>
      </tags>
  </entry>
</search>
