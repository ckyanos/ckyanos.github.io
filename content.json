{"meta":{"title":"ckyanos's blog","subtitle":null,"description":"OI","author":"ckyanos","url":"http://yoursite.com","root":"/"},"pages":[{"title":"archives","date":"2019-07-22T11:01:26.000Z","updated":"2019-07-22T11:46:03.594Z","comments":true,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-07-22T11:01:26.000Z","updated":"2019-07-22T11:03:58.716Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"friend links","date":"2019-07-22T11:01:26.000Z","updated":"2019-07-24T14:29:02.106Z","comments":true,"path":"friend links/index.html","permalink":"http://yoursite.com/friend links/index.html","excerpt":"","text":"NotaKoala"},{"title":"sitemap","date":"2019-07-22T10:59:52.000Z","updated":"2019-07-22T11:46:46.969Z","comments":true,"path":"sitemap/index.html","permalink":"http://yoursite.com/sitemap/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-22T10:59:52.000Z","updated":"2019-07-22T11:04:01.336Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"过路费","slug":"过路费","date":"2019-07-21T16:00:00.000Z","updated":"2019-07-23T14:46:15.085Z","comments":true,"path":"2019/07/22/过路费/","link":"","permalink":"http://yoursite.com/2019/07/22/过路费/","excerpt":"","text":"题目描述在某个遥远的国家里，有n个城市,编号分别为1，2，3，…，n。这个国家的政府修建了m条双向道路，每条道路连接着两个城市。政府规定从城市S到城市T需要收取的过路费为所经过城市之间道路长度的最大值。如：A到B长度为2，B到C长度为3，那么开车从A经过B到C需要上交的过路费为3。 佳佳是个做生意的人，需要经常开车从任意一个城市到另外一个城市，因此他需要频繁地上交过路费，由于忙于做生意，所以他无时间来寻找交过路费最低的行驶路线。然而，当他交的过路费越多他的心情就变得越糟糕。作为秘书的你，需要每次根据佳佳开车的起止城市，提供给他从开始城市到达目标城市，最少需要上交多少过路费。 Input第一行是两个整数n 和m，分别表示城市的个数以及道路的条数。 接下来m行，每行包含三个整数 a，b，w（1≤a，b≤n，0≤w≤109），表示a与b之间有一条长度为w的道路。 接着有一行为一个整数q，表示佳佳发出的询问个数。 再接下来q行，每一行包含两个整数S，T（1≤S,T≤n，S≠T）, 表示开始城市S和目标城市T。 Output输出文件共q行，每行一个整数，分别表示每个询问需要上交的最少过路费用。输入数据保证所有的城市都是连通的。 Sample Input1234567894 51 2 101 3 201 4 1002 4 303 4 1021 44 1 Sample Output122020 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N = 2e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w; &#125;int head[N], Next[N], edge[N], ver[N], tot;int f[N][21], g[N][21], d[N], n, m, root;inline void add(int x, int y, int z) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125;struct node&#123; int a, b, val;&#125;t[N];bool cmp(node A, node B) &#123; return A.val &lt;= B.val;&#125;int fa[N];inline int get(int x) &#123; if(fa[x] == x)return x; return fa[x] = get(fa[x]);&#125;void dfs(int x, int father) &#123; d[x] = d[father] + 1; for(int i = 0; i &lt;= 14; i++) &#123; f[x][i + 1] = f[ f[x][i] ][i]; g[x][i + 1] = max(g[x][i], g[ f[x][i] ][i]); &#125; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(y == father)continue; f[y][0] = x; g[y][0] = z; dfs(y, x); &#125;&#125;int LCA(int x, int y) &#123; int ans = 0; if(d[x] &lt; d[y])swap(x, y); if(x == y)return ans; for(int i = 15; i &gt;= 0; i--) &#123; if(d[f[x][i]] &gt;= d[y]) &#123; ans = max(ans, g[x][i]); x = f[x][i]; if(x == y)return ans; &#125; &#125; for(int i = 15; i &gt;= 0; i--) &#123; if(f[x][i] != f[y][i]) &#123; ans = max(ans, g[x][i]); ans = max(ans, g[y][i]); x = f[x][i]; y = f[y][i]; &#125; &#125; return max(ans, max(g[x][0], g[y][0]));&#125;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= n; i++)fa[i] = i; for(int i = 1; i &lt;= m; i++) &#123; t[i].a = read(), t[i].b = read(), t[i].val = read(); &#125; sort(t + 1, t + 1 + m, cmp); for(int i = 1; i &lt;= m; i++) &#123; int x = get(t[i].a), y = get(t[i].b); if(x == y)continue; fa[x] = y; add(t[i].a, t[i].b, t[i].val); add(t[i].b, t[i].a, t[i].val); &#125; dfs(1, 0); int Q = read(); for(int i = 1; i &lt;= Q; i++) &#123; int x = read(), y = read(); printf(\"%d\\n\", LCA(x, y)); &#125; return 0;&#125;","categories":[{"name":"cpp","slug":"cpp","permalink":"http://yoursite.com/categories/cpp/"}],"tags":[{"name":"LCA","slug":"LCA","permalink":"http://yoursite.com/tags/LCA/"},{"name":"最小生成树","slug":"最小生成树","permalink":"http://yoursite.com/tags/最小生成树/"}]},{"title":"铺设道路","slug":"铺设道路","date":"2019-07-13T16:00:00.000Z","updated":"2019-07-23T12:02:56.259Z","comments":true,"path":"2019/07/14/铺设道路/","link":"","permalink":"http://yoursite.com/2019/07/14/铺设道路/","excerpt":"","text":"12345678910111213141516171819202122232425262728#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt; #include&lt;cmath&gt;using namespace std;const int MAX_N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int n, x, y, ans;int main()&#123; freopen(\"road.in\", \"r\", stdin); freopen(\"road.out\", \"w\", stdout); n = read(); for(int i = 1; i &lt;= n; i++) &#123; x = read(); if(x &gt; y)ans += x - y; swap(x, y); &#125; printf(\"%d\\n\", ans); return 0;&#125;","categories":[{"name":"noip2018复盘","slug":"noip2018复盘","permalink":"http://yoursite.com/categories/noip2018复盘/"}],"tags":[{"name":"noip2018","slug":"noip2018","permalink":"http://yoursite.com/tags/noip2018/"},{"name":"贪心","slug":"贪心","permalink":"http://yoursite.com/tags/贪心/"}]},{"title":"树的直径","slug":"树的直径","date":"2019-07-12T16:00:00.000Z","updated":"2019-07-23T12:03:01.425Z","comments":true,"path":"2019/07/13/树的直径/","link":"","permalink":"http://yoursite.com/2019/07/13/树的直径/","excerpt":"","text":"dp求树的直径12345678910void dp(int x) &#123; v[x] = 1; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(v[y])continue; dp(y); ans = max(ans, d[x] + d[y] + z); d[x] = max(d[x], d[y] + z); &#125;&#125;","categories":[{"name":"模板","slug":"模板","permalink":"http://yoursite.com/categories/模板/"}],"tags":[{"name":"树的直径","slug":"树的直径","permalink":"http://yoursite.com/tags/树的直径/"},{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/图论/"}]},{"title":"货币系统","slug":"货币系统","date":"2019-07-12T16:00:00.000Z","updated":"2019-07-23T12:03:10.226Z","comments":true,"path":"2019/07/13/货币系统/","link":"","permalink":"http://yoursite.com/2019/07/13/货币系统/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt; #include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;const int MAX_N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int T, a[MAX_N], b[MAX_N], n, m;bool v[MAX_N];int main() &#123; freopen(\"money.in\", \"r\", stdin); freopen(\"money.out\", \"w\", stdout); T = read(); while(T--) &#123; int ans = 0; memset(a, 0 ,sizeof(a)); memset(b, 0 ,sizeof(b)); memset(v, 0 ,sizeof(v)); n = read(); for(int i = 1; i &lt;= n; i++)a[i] = read(); sort(a + 1, a + 1 + n); if(a[1] == 1) &#123; printf(\"1\\n\"); continue; &#125; for(int i = 1; i &lt;= n; i++) &#123; if(v[a[i]])continue; v[a[i]] = 1; for(int j = 1; j + a[i] &lt;= a[n]; j++) &#123; if(!v[j])continue; v[a[i] + j] = 1; &#125; ans++; &#125; printf(\"%d\\n\", ans); &#125; return 0;&#125;","categories":[{"name":"noip2018复盘","slug":"noip2018复盘","permalink":"http://yoursite.com/categories/noip2018复盘/"}],"tags":[{"name":"筛法","slug":"筛法","permalink":"http://yoursite.com/tags/筛法/"},{"name":"noip2018","slug":"noip2018","permalink":"http://yoursite.com/tags/noip2018/"}]}]}