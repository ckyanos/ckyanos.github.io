{"meta":{"title":"ckyanos's blog","subtitle":null,"description":"OI","author":"ckyanos","url":"http://yoursite.com","root":"/"},"pages":[{"title":"archives","date":"2019-07-22T11:01:26.000Z","updated":"2019-07-22T11:46:03.594Z","comments":true,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"sitemap","date":"2019-07-22T10:59:52.000Z","updated":"2019-07-22T11:46:46.969Z","comments":true,"path":"sitemap/index.html","permalink":"http://yoursite.com/sitemap/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-22T10:59:52.000Z","updated":"2019-07-22T11:04:01.336Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-07-22T11:01:26.000Z","updated":"2019-07-22T11:03:58.716Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"LCA最近公共祖先","slug":"LCA","date":"2019-10-27T16:00:00.000Z","updated":"2019-10-28T08:03:33.900Z","comments":true,"path":"2019/10/28/LCA/","link":"","permalink":"http://yoursite.com/2019/10/28/LCA/","excerpt":"","text":"性质 $LCA(u) = u$; $u$ 是 $v$ 的祖先，当且仅当 $LCA(u, v) = u$ ； 如果 $u$ 不为 $v$ 的祖先并且 $v$ 不为 $u$ 的祖先，那么 $u , v$ 分别处于 $LCA(u, v)$ 的两棵不同子树中； 前序遍历中， $LCA(s$ 出现在所有 $S$ 中元素之前，后序遍历中 $LCA(s)$ 则出现在所有 $s$ 中元素之后； 点集并的最近公共祖先为两点集分别的最近公共祖先的最近公共祖先,即 $LCA(A ∪ B) = LCA(LCA(A), LCA(B)) $ 两点的最近公共祖先必定处在树上两点间的最短路上； $dist(u, v) = dep[u] + dep[v] - 2 * dep[LCA(u, v)]$, $dep$代表某点到树跟的距离(树的深度) 倍增算法LCA123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt; using namespace std;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9') &#123;if(ch == '-')w = -1;ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int n, m;int head[N], Next[N], ver[N], edge[N], tot;int dep[N], f[N][22], p[N];inline void add(int x, int y) &#123; ver[++tot] = y; Next[tot] =head[x]; head[x] = tot;&#125;inline void dfs(int x, int fa) &#123; dep[x] = dep[fa] + 1; for(int i = 1; i &lt;= 21; i++) &#123; f[x][i] = f[f[x][i - 1]][i - 1]; //.. if(!f[x][i])break; &#125; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(y == fa)continue; f[y][0] = x; //... dfs(y, x); &#125;&#125;inline int LCA(int x, int y) &#123; if(dep[x] &lt; dep[y])swap(x, y); for(int i = 21; i &gt;= 0; i--) &#123; if(dep[f[x][i]] &gt;= dep[y]) &#123; //.. x = f[x][i]; &#125; if(x == y) return x; //... &#125; for(int i = 21; i &gt;= 0; i--) &#123; if(f[x][i] != f[y][i]) &#123; //... x = f[x][i]; y = f[y][i]; &#125; &#125; //... return f[x][0];&#125;int main() &#123; n = read(); for(int i = 1; i &lt; n; i++) &#123; int x = read(), y = read(); add(x, y); add(y, x); &#125; dfs(1, 0); m = read(); for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(); printf(\"%d\\n\", LCA(x, y)); &#125; return 0;&#125; 点的距离123inline int dist(int x, int y) &#123; return dep[x] + dep[y] - 2 * dep[LCA(X, y)];&#125;","categories":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/categories/图论/"}],"tags":[{"name":"LCA","slug":"LCA","permalink":"http://yoursite.com/tags/LCA/"}]},{"title":"ST表","slug":"ST表","date":"2019-10-27T16:00:00.000Z","updated":"2019-10-28T23:21:09.945Z","comments":true,"path":"2019/10/28/ST表/","link":"","permalink":"http://yoursite.com/2019/10/28/ST表/","excerpt":"","text":"引入题目大意：给定 $n$ 个数，有 $m$ 个询问，对于每个询问，你需要回答区间 $[l, r]$ 中的最大值 思路令 $f[i, j]$ 表示 $[i, i + 2^{j} - 1]$的最大值 边界 $f[i, 0] = a[i]$ 将区间 $[i, i + 2^{j} - 1]$分成相同的两部分中点为 $（ i + (i + 2^{j} - 1))/ 2 = i + 2^{j - 1} - 1/2$区间分为 $[i, i + 2^{j-1} - 1]$ 和 $[i + 2^{j-1}, i + 2^{j} - 1]$ 状态转移方程:$f[i, j] = max(f[i, j - 1], f[i + 2^{j - 1}, j - 1])$ 对于每个询问区间 $[l, r]$, 我们把它分成两部分: $[l, t]$, $[r - 2^{t} + 1, t]$其中 $t = log_{2}(r - l + 1)$显然，这两个区间会重叠。但是，重叠并不会对区间最大值产生影响。同时这两个区间刚好覆盖了 $[l, r]$ , 可以保证答案的正确性。 复杂度$O(n logn)$预处理, $O(1)$回答每个询问。但不支持修改操作。 Code:12345678910111213#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;using namespace std;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9') &#123;if(ch == '-')w = -1;ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125; 预处理1234567891011121314int f[N][21], a[N], n, m;inline void ST_prework() &#123; for(int i = 1; i &lt;= n; i++) &#123; f[i][0] = a[i]; &#125; int t = log(n) / log(2); for(int j = 1; j &lt;= t; j++) &#123; for(int i = 1; i &lt;= n - (1 &lt;&lt; j) + 1; i++) &#123; f[i][j] = max(f[i][j - 1], f[i + (1 &lt;&lt;(j - 1))][j - 1]); &#125; &#125;&#125; query1234inline int ST_query(int l, int r) &#123; int k = log(r - l + 1) / log(2); return max(f[l][k], f[r - (1 &lt;&lt; k) + 1][k]);&#125; 1234567891011int main() &#123; n = read(); for(int i = 1; i &lt;= n; i++)a[i] = read(); ST_prework(); m = read(); for(int i = 1; i &lt;= m; i++) &#123; int l = read(), r = read(); printf(\"%d\\n\", ST_query(l, r)); &#125; return 0;&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/categories/数据结构/"}],"tags":[{"name":"倍增","slug":"倍增","permalink":"http://yoursite.com/tags/倍增/"},{"name":"ST表","slug":"ST表","permalink":"http://yoursite.com/tags/ST表/"},{"name":"RMQ","slug":"RMQ","permalink":"http://yoursite.com/tags/RMQ/"}]},{"title":"最小生成树","slug":"最小生成树","date":"2019-10-27T16:00:00.000Z","updated":"2019-10-28T08:33:23.968Z","comments":true,"path":"2019/10/28/最小生成树/","link":"","permalink":"http://yoursite.com/2019/10/28/最小生成树/","excerpt":"","text":"Kruskal 算法Kruskal 算法是一种常见并且好写的最小生成树算法，由 Kruskal 发明。该算法的基本思想是从小到大加入边，是个贪心算法。 oi-wiki证明 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int fa[N];struct node&#123; int a, b, val;&#125;c[N];inline bool cmp(node A, node B) &#123; return A.val &lt; B.val;&#125;inline int get(int x) &#123; if(fa[x] == x)return x; return fa[x] = get(fa[x]);&#125;inline void merge(int x, int y) &#123; x = get(x), y = get(y); fa[x] = y;&#125;inline bool same(int x, int y) &#123; return get(x) == get(y);&#125;int n, m, q;long long ans;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= n; i++)fa[i] = i; for(int i = 1; i &lt;= m; i++) &#123; c[i].a = read(), c[i].b = read(); c[i].val = read(); &#125; sort(c + 1, c + 1 + m, cmp); for(int i = 1; i &lt;= m; i++) &#123; int x = c[i].a, y = c[i].b, z = c[i].val; if(!same(x, y)) &#123; merge(x, y); ans += z; &#125; &#125; printf(\"%lld\\n\", ans);&#125; Prim 算法Prim 算法是另一种常见并且好写的最小生成树算法。该算法的基本思想是从一个结点开始，不断加点（而不是 Kruskal 算法的加边）。 oi-wiki证明 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt; using namespace std;const int N = 3e3 + 10;int a[N][N], d[N], n, m, ans;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9') &#123;if(ch == '-')w = -1;ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int v[N];inline void prim() &#123; memset(d, 0x3f, sizeof d); memset(v, 0, sizeof v); d[1] = 0; for(int i = 1; i &lt; n; i++) &#123; int x = 0; for(int j = 1; j &lt;= n; j++) &#123; if(!v[j] &amp;&amp; (x == 0 || d[j] &lt; d[x])) &#123; x = j; &#125; &#125; v[x] = 1; for(int y = 1; y &lt;= n; y++) &#123; if(!v[y]) &#123; d[y] = min(d[y], a[x][y]); &#125; &#125; &#125;&#125;int main() &#123; n = read(); m = read(); memset(a, 0x3f, sizeof a); for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(), z = read(); a[x][y] = a[y][x] = min(a[x][y], z); &#125; prim(); for(int i = 2; i &lt;= n; i++) &#123; ans += d[i]; &#125; printf(\"%d\\n\", ans);&#125;","categories":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/categories/图论/"}],"tags":[{"name":"最小生成树","slug":"最小生成树","permalink":"http://yoursite.com/tags/最小生成树/"}]},{"title":"存图","slug":"存图","date":"2019-10-23T16:00:00.000Z","updated":"2019-10-28T06:57:20.512Z","comments":true,"path":"2019/10/24/存图/","link":"","permalink":"http://yoursite.com/2019/10/24/存图/","excerpt":"","text":"实现1234567891011#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;vector&gt;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9') &#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125; 邻接矩阵数组12345678910111213141516171819const int M = 1e3 + 10;int a[M][M];int main() &#123; memset(a, 0x3f, sizeof a); for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(), z = read(); a[x][y] = min(z, a[x][y]); a[y][x] = min(z, a[y][x]); &#125; //遍历 for(int i = 1; i &lt;= n; i++) &#123; for(int j = 1; j &lt;= n; j++) &#123; // x = i, y = j, z = a[i][j]; &#125; &#125;&#125; 邻接表vector12345678910111213141516171819vector&lt;pair&lt;int, int&gt; &gt;G[N];inline void dfs(int x) &#123; for(int i = 0; i &lt; G[x].size; i++) &#123; int y = G[x][i].first, z = G[x][i].second; //... &#125;&#125;int main() &#123; for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(), z = raed(); G[x].push_back(make_pair(y, z)); G[y].push_back(make_pair(x, z)); &#125; //遍历 dfs(1);&#125; 链式前项星12345678910111213141516171819202122232425262728293031323334353637383940int head[N], Next[N], ver[N], edge[N], tot;inline void add(int x, int y, int z) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125;inline void dfs(int x, int fa) &#123; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(y == fa)continue; //... dfs(y, x); &#125;&#125;/*int v[N];inline void dfs(int x) &#123; v[x] = 1; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(v[y])continue; //... dfs(y); &#125;&#125;*/int main() &#123; for(int i = 1; i&lt;= m; i++) &#123; int x = read(), y = read(), z = read(); add(x, y, z); add(y, x, z); &#125; //遍历 dfs(1);&#125;","categories":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/categories/图论/"}],"tags":[{"name":"邻接表","slug":"邻接表","permalink":"http://yoursite.com/tags/邻接表/"},{"name":"邻接矩阵","slug":"邻接矩阵","permalink":"http://yoursite.com/tags/邻接矩阵/"}]},{"title":"黑盒子","slug":"黑盒子","date":"2019-10-22T16:00:00.000Z","updated":"2019-10-28T08:02:36.286Z","comments":true,"path":"2019/10/23/黑盒子/","link":"","permalink":"http://yoursite.com/2019/10/23/黑盒子/","excerpt":"","text":"大致思路:维护第 K 小的数 -&gt; 对顶堆 做法: 设置一个 top 指针, 表示当前元素个数 建立对顶堆维护(对顶堆:大根堆的堆顶小与小根堆的堆顶) 当前小根堆堆顶即是 ans 注意: i每一次都是要增加1的,所以我们每次做完Get操作后,都需要最小堆中的最小数弹出存入最大堆,也就是满足第K小,因为K就是i Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int N = 1e6 + 10;inline long long read() &#123; long long s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9') &#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int n, m;queue&lt;int&gt;q;priority_queue&lt;int&gt;qmax;priority_queue&lt;int, vector&lt;int&gt; ,greater&lt;int&gt; &gt; qmin;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= n; i++) &#123; int x = read(); q.push(x); &#125; int top = 1; for(int i = 1; i &lt;= m; i++) &#123; int order = read(); while(top &lt;= order) &#123; int order = q.front(); q.pop(); qmin.push(order); while(qmax.size() &amp;&amp; (qmax.top() &gt; qmin.top()) ) &#123; int x = qmax.top(); qmax.pop(); qmin.push(x); x = qmin.top(); qmin.pop(); qmax.push(x); &#125; top++; &#125; int x = qmin.top(); qmin.pop(); qmax.push(x); printf(\"%d\\n\", x); &#125; return 0;&#125;","categories":[{"name":"21届训练","slug":"21届训练","permalink":"http://yoursite.com/categories/21届训练/"}],"tags":[{"name":"对顶堆","slug":"对顶堆","permalink":"http://yoursite.com/tags/对顶堆/"}]},{"title":"聚会","slug":"聚会","date":"2019-10-22T16:00:00.000Z","updated":"2019-10-28T08:02:42.719Z","comments":true,"path":"2019/10/23/聚会/","link":"","permalink":"http://yoursite.com/2019/10/23/聚会/","excerpt":"","text":"题意给一棵树, 要求三个节点的人聚合在一起的最小路程和. 思路设 $x$ 和 $y$ 先在一起, 再和 $z$ 聚会 考虑两种方案: $x$ 和 $y$ 到 $z$ 的位置消耗距离 $= 2 * dist(xy, z)$ $z$ 到 $x$ 和 $y$ 号的位置消耗距离 $= dist(xy, z)$ 显然方案一更优. 综上所述,同理其他两种方案也可以得出: $x$ , $y$ 先在一起 $x$ , $z$ 先在一起 $y$ , $z$ 先在一起 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include&lt;iostream&gt;#include&lt;cstdio&gt; using namespace std;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0'|| ch &gt; '9') &#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int head[N], Next[N], ver[N], edge[N], tot;int dep[N], f[N][22];inline void add(int x, int y) &#123; ver[++tot] = y; Next[tot] = head[x]; head[x] = tot;&#125;inline void dfs(int x, int father) &#123; dep[x] = dep[father] + 1; for(int i = 1; i &lt;= 21; i++) &#123; f[x][i] = f[f[x][i - 1]][i - 1]; &#125; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(y == father)continue; f[y][0] = x; dfs(y, x); &#125;&#125;inline int LCA(int x, int y) &#123; if(dep[x] &lt; dep[y])swap(x, y); for(int i = 21; i &gt;= 0; i--) &#123; if(dep[f[x][i]] &gt;= dep[y]) &#123; x = f[x][i]; &#125; if(x == y)return x; &#125; for(int i = 21; i &gt;= 0; i--) &#123; if(f[x][i] != f[y][i]) &#123; x = f[x][i]; y = f[y][i]; &#125; &#125; return f[x][0];&#125;inline int dist(int x, int y) &#123; return dep[x] + dep[y] - 2 * dep[LCA(x, y)];&#125;int n, m;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt; n; i++) &#123; int x = read(), y = read(); add(x, y); add(y, x); &#125; dfs(1, 0); int Dis = 0x3f3f3f3f, Pos; for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(), z = read(); int xy = LCA(x, y), xz = LCA(x, z), yz = LCA(y, z); int cos = dist(x, y); if (dep[xy] &lt; dep[yz]) &#123; xy = yz; cos = dist(y, z); z = x; &#125; if (dep[xy] &lt; dep[xz]) &#123; xy = xz; cos = dist(x, z); z = y; &#125; cos += dist(z, xy); printf(\"%d %d\\n\", xy, cos); &#125; return 0;&#125;","categories":[{"name":"21届训练","slug":"21届训练","permalink":"http://yoursite.com/categories/21届训练/"}],"tags":[{"name":"LCA","slug":"LCA","permalink":"http://yoursite.com/tags/LCA/"}]},{"title":"树与图的操作","slug":"树与树上操作","date":"2019-10-13T16:00:00.000Z","updated":"2019-10-28T08:03:00.784Z","comments":true,"path":"2019/10/14/树与树上操作/","link":"","permalink":"http://yoursite.com/2019/10/14/树与树上操作/","excerpt":"","text":"树的性质 $n$ 个节点 $n - 1$ 条边 无向无环的连通图 树的节点树为所有节点度数加 $1$（加根节点）。 任意两个结点之间有且仅有一条简单路径的无向图 任何边均为桥的连通图 没有环，且在任意不同两点间添加一条边之后所得图含唯一的一个环的图 存图123456inline void add(int x, int y) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125; 树的深度优先遍历12345678910const int N = 1e6 + 10;int v[N];inline void dfs(int x) &#123; v[x] = 1; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(v[y])continue; dfs(y); &#125;&#125; dfs序1234567891011int v[N], cnt;inline void dfs(int x) &#123; dfsort[++cnt] = x; v[x] = 1; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(v[y])continue; dfs(y); &#125; dfsort[++cnt] = x;&#125; 树的深度12345678910int v[N], dep[N];inline void dfs(int x) &#123; v[x] = 1; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(v[y])continue; dep[y] = dep[x] + 1; dfs(y); &#125;&#125; 树的重心12345678910111213141516171819int v[N], size[N];int max_part, pos;inline void dfs(int x) &#123; v[x] = 1; size[x] = 1; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(v[y])continue; dfs(y);//统计子节点 size[x] += size[y]; max_part = max(max_part, size[y]); &#125; max_part = max(max_part, size[x]); if(max_part &lt; ans) &#123; ans = max_part; pos = x; &#125;&#125; 图的连通块划分1234567891011121314151617inline void dfs(int x) &#123; v[x] = cnt;//划分连通块 for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(v[y])continue; dfs(y); &#125;&#125;int main() &#123; for(int i = 1; i &lt;= n; i++) &#123; if(!v[i]) &#123; cnt++; dfs(i); &#125; &#125;&#125; 广度优先遍历性质: 单调性: 在访问完所有的第 $i$ 层节点后, 才开始访问第 $i + 1$层节点 双段性: 在任意时刻, 队列中至多有两个层次的节点 Code:12345678910111213141516171819202122232425262728#include&lt;cstdio&gt;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;//以树的深度为例 int v[N], dep[N];inline void bfs() &#123; memset(v, 0x3f, sizeof(v)); q.push(1); dep[1] = 1; while(q.size()) &#123; int x = q.front(); q.pop(); for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(v[y])continue; dep[y] = dep[x] + 1; q.push(y); &#125; &#125;&#125; 拓扑排序算法流程 建立空的拓扑序列 $toporder$ 预处理入度, 把所有入度为 $0$ 的点入队 取出对头 $x$ 把 $x$ 加入拓扑序列的末尾 对于 $x$ 从 $x$ 出发的每条边 $(x, y)$ , 把 $deg[y]$ 减 $1$ 队列为空时, $toporder$即为所求 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;cstdio&gt;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int head[N], Next[N], ver[N], v[N];int deg[N]; //入度 int toporder[N], cnt;//拓扑序 inline void add(int x, int y) &#123; ver[++tot] = y; Next[tot] = head[x]; head[x] = tot; deg[y]++;&#125;inline void topsort() &#123; queue&lt;int&gt;q; for(int i = 1; i &lt;= n; i++) &#123; if(deg[i] == 0)q.push(i); &#125;//push 入度为 $0$ 的点 while(q.size()) &#123; int x = q.front(); q.pop(); toporder[++cnt] = x; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(v[y])continue; if(--deg[y] == 0)q.push(y); &#125; &#125;&#125;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(); add(x, y); &#125; topsort(); for(int i = 1; i &lt;= cnt; i++) &#123; printf(\"%d \", toporder[i]); &#125;&#125; 统计路径以 $spfa$ 为例:$p$ 数组统计路径信息$restore(x)$ 输出的是从起点到 $x$ 这个点所经过的点。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt; #include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9') &#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int head[N], Next[N], ver[N], edge[N], tot;int d[N], v[N];inline void add(int x, int y, int z) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125;int p[N];inline void spfa() &#123; memset(d, 0x3f, sizeof d); queue&lt;int&gt;q; q.push(1); v[1] = 1; d[1] = 0; p[1] = -1; while(q.size()) &#123; int x = q.front(); q.pop(); v[x] = 0; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(d[y] &gt; d[x] + z) &#123; d[y] = d[x] + z; if(!v[y]) &#123; v[y] = 1; q.push(y); p[y] = x; &#125; &#125; &#125; &#125;&#125;vector&lt;int&gt;res;inline void restore(int x) &#123; for(int i = x; i != -1; i = p[i]) &#123; res.push_back(i); &#125; reverse(res.begin(), res.end()); for(int i = 0; i &lt; res.size(); i++) &#123; printf(\"%d \", res[i]); &#125;&#125;int n, m;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(), z = read(); add(x, y, z); &#125; spfa(); printf(\"%d\\n\", d[n]); restore(n); return 0;&#125;","categories":[{"name":"树","slug":"树","permalink":"http://yoursite.com/categories/树/"},{"name":"图论","slug":"树/图论","permalink":"http://yoursite.com/categories/树/图论/"}],"tags":[{"name":"树","slug":"树","permalink":"http://yoursite.com/tags/树/"},{"name":"遍历","slug":"遍历","permalink":"http://yoursite.com/tags/遍历/"},{"name":"时间戳","slug":"时间戳","permalink":"http://yoursite.com/tags/时间戳/"},{"name":"连通块","slug":"连通块","permalink":"http://yoursite.com/tags/连通块/"},{"name":"拓扑排序","slug":"拓扑排序","permalink":"http://yoursite.com/tags/拓扑排序/"}]},{"title":"SDOI 直径","slug":"SDOI 直径","date":"2019-10-12T16:00:00.000Z","updated":"2019-10-28T08:03:48.948Z","comments":true,"path":"2019/10/13/SDOI 直径/","link":"","permalink":"http://yoursite.com/2019/10/13/SDOI 直径/","excerpt":"","text":"题意树的直径必经边 思路~我还没A掉~首先找直径。先从任取点tt出发，到达最远的一个点uu。再从uu出发，到达最远的点vv，uu，vv之间的路径即为树的直径。我们意识到，这条最长路也是直径的一个选择，对于直径的起点和终点，如果都有这样一个断点，两个断点在直径上的距离就为必经边长度注意：枚举每一个点dfs求最长路时，在dfs过程中求出最长路的值，避免d数组的重新赋值和循环求出最长路，否则时间复杂度将上升到 $O(n^2)$ Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#define ll long longusing namespace std;const int N = 200006;int n, p[N], q[N];bool v[N];ll d[N], f[N];vector&lt;pair&lt;int, ll&gt; &gt; e[N];void dfs(int x, int &amp;o) &#123; v[x] = 1; for (unsigned int i = 0; i &lt; e[x].size(); i++) &#123; int y = e[x][i].first, z = e[x][i].second; if (v[y]) continue; d[y] = d[x] + z; p[y] = x; dfs(y, o); &#125; v[x] = 0; if (d[x] &gt; d[o]) o = x;&#125;int main() &#123; cin &gt;&gt; n; for (int i = 1; i &lt; n; i++) &#123; int x, y, z; scanf(\"%d %d %d\", &amp;x, &amp;y, &amp;z); e[x].push_back(make_pair(y, z)); e[y].push_back(make_pair(x, z)); &#125; int s = 1; dfs(1, s); int t = s; d[s] = p[s] = 0; dfs(s, t); cout &lt;&lt; d[t] &lt;&lt; endl; for (int i = t; i; i = p[i]) &#123; v[i] = 1; q[p[i]] = i; &#125; for (int x = t; x; x = p[x]) &#123; f[x] = 0; for (unsigned int i = 0; i &lt; e[x].size(); i++) &#123; int y = e[x][i].first, z = e[x][i].second; if (v[y]) continue; d[y] = z; int w = y; dfs(y, w); f[x] = d[w]; &#125; &#125; int i, ans = 0; for (i = s; i; i = q[i]) if (d[t] - d[i] == f[i]) break; while (i) &#123; if (d[i] == f[i]) break; ans++; i = p[i]; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125;","categories":[{"name":"21届训练","slug":"21届训练","permalink":"http://yoursite.com/categories/21届训练/"}],"tags":[{"name":"树的直径","slug":"树的直径","permalink":"http://yoursite.com/tags/树的直径/"}]},{"title":"割点和桥","slug":"割边与桥","date":"2019-10-12T16:00:00.000Z","updated":"2019-10-28T08:02:13.784Z","comments":true,"path":"2019/10/13/割边与桥/","link":"","permalink":"http://yoursite.com/2019/10/13/割边与桥/","excerpt":"","text":"概念引入时间戳dfn[x]$dfn[x]$ 优先深度遍历中每个节点第一次被访问的时间顺序 搜索树在无向连通图中任选一个节点进行深度优先遍历,每个节点只被访问一次.所有发生递归的边 $(x, y)$ 构成一棵树。我们把它成为无向连通图的搜索树。当然,一般无向图(不一定连通)的各个连通块的搜索树构成无向图的”搜索森林” 追溯值low[x]设 $subtree(x)$ 为以 $x$ 根节点的子树$low[x]$ 定义为以下节点的时间戳的最小值: 1.$subtree(x)$ 中的节点 2.通过 1 条不在搜索树上的边,能够到达 $subtree(x)$ 的节点. low[x]的计算:初始化 low[x] = dfn[x] 1.如果 x = root(y) low[x] = min(low[x], low[y]) 2.如果无向边(x, y)不是搜索树的边 low[x] = min(low[x], dfn[y]); 割边割边定义若对于 $e ∈ E$ ,从图中删去边 $e$ 之后, $G$ 分裂成两个不相连的子图, 则称 $e$ 为 $G$ 的桥或割边。 割边判定法则无向边(x, y)是桥, 当且仅当搜索树上存在 x 的一个子节点 y, 满足:1dfn[x] &lt; low[y] 性质桥一定是搜索树中的边,并且一个简单环中的便一定都不是桥. Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647const int N = 1e6 + 10;int head[N], Next[N], ver[N], edge[N], tot, num;int dfn[x], low[x];bool bridge[N];inline void add(int x, int y) &#123; ver[++tot] = y; Next[tot] = head[x]; head[x] = tot;&#125;inline void tarjan(int x, int in_edge) &#123; dfn[x] = low[x] = ++num; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(!dfn[y]) &#123; tarjan(y, i); low[x] = min(low[x], low[y]); if(low[y] &gt; dfn[x]) &#123; bridge[i] = bridge[i ^ 1] = true; &#125; &#125; else if(i != (in_edge ^ 1)) &#123; low[x] = min(low[x], dfn[y]); &#125; &#125;&#125;int main() &#123; n = read(); m = read(); tot = 1; for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(); add(x, y); add(y, x); &#125; for(int i = 1; i &lt;= n; i++) &#123; if(!dfn[i])tarjan(i, 0); &#125; for(int i = 2; i &lt; tot; i += 2) &#123; if(bridge[i]) &#123; printf(\"%d %d\\n\", ver[i ^ 1], ver[i]); &#125; &#125;&#125; 割点定义在无向联通图 $G = (V,E)$ 中: 若对于 $x ∈ V$ ， 从图中删去节点x以及所有与 $x$ 关联的边之后, $G$ 分裂成两个或两个以上不相连的子图， 则称 $x$ 为 $G$ 的割点。 割点判定法则若 $x$ 不是搜索树的根节点(优先深度遍历的起点), 则 $x$ 是割点当且仅当搜索树上存在 $x$ 的一个子节点 $y$满足:1dfn[x] &lt;= low[y] 特别的, 若 $x$ 是搜索树的根节点, 则 $x$ 是割点当且仅当搜索树上存在 $x$ 的两个个子节点 $y_{1}$ $y_{2}$ 满足上述条件 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051const int N = 1e6 + 10;int head[N], Next[N], ver[N], edge[N], tot, num;int dfn[x], low[x];bool cut[N];inline void add(int x, int y) &#123; ver[++tot] = y; Next[tot] = head[x]; head[x] = tot;&#125;inline void tarjan(int x) &#123; dfn[x] = low[x] = ++num; int flag = 0; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i]; if(!dfn[x]) &#123; tarjan(y); low[x] = min(low[x], low[y]); &#125; if(low[y] &gt;= dfn[x]) &#123; flag++; if(x != root || flag &gt; 1) &#123; cut[x] = true; &#125; &#125; else &#123; low[x] = min(low[x], dfn[y]); &#125; &#125;&#125;int main() &#123; n = read(); m = read(); tot = 1; for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(); if(x == y)continue; add(x, y); add(y, x); &#125; for(int i = 1; i &lt;= n; i++) &#123; if(!dfn[i])tarjan(i); &#125; for(int i = 2; i &lt; tot; i += 2) &#123; if(cut[i]) &#123; printf(\"%d\\n\", i); &#125; &#125;&#125;","categories":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/categories/图论/"}],"tags":[{"name":"割点和桥","slug":"割点和桥","permalink":"http://yoursite.com/tags/割点和桥/"}]},{"title":"背包","slug":"背包","date":"2019-10-12T16:00:00.000Z","updated":"2019-10-13T07:15:07.479Z","comments":true,"path":"2019/10/13/背包/","link":"","permalink":"http://yoursite.com/2019/10/13/背包/","excerpt":"","text":"0/1背包问题题目有 $N$ 件物品和一个容量为 $V$ 的背包。第 $i$ 件物品的费用是 $c[i]$，价值是 $w[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 状态转移方程1f[i][j] = max(f[i - 1][j], f[i - 1][j - c[i] + w[i]]); 时间复杂度 $O(nV)$ Code:123456789101112const int N = 1e6 + 10;int f[N];inline void dp() &#123; for(int i = 1; i &lt;= n; i++) for(int j = V; j &gt;= v[i]; j--) &#123; f[j] = max(f[j], f[j - c[i]] + w[i]); &#125; for(int i = 0; i &lt;= V; i++) &#123; ans = max(ans, f[i]); &#125;&#125; 完全背包问题题目有 $N$ 件物品和一个容量为 $V$ 的背包，每种物品都有无限件可用。第 $i$ 件物品的费用是 $c[i]$，价值是 $w[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 状态转移方程12f[j] = max(f[j], f[j - c[i]] + w[i]);// 0 &lt;= k * c[i] &lt;= v Code:123456789101112const int N = 1e6 + 10;int f[N], ans;inline void dp() &#123; for(int i = 1; i &lt;= n; i++) for(int j = c[i]; j &lt;= V; j++) &#123; f[j] = max(f[j], f[j - c[i]] + w[i]); &#125; for(int i = 0; i &lt;= V; i++) &#123; ans = max(ans, f[i]); &#125;&#125; 多重背包问题题目有 $N$ 种物品和一个容量为 $V$ 的背包。第 $i$ 种物品最多有 $n[i]$ 件可用，每件费用是 $c[i]$ ，价值是 $w[i]$ 。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 状态转移方程Code:12345678910111213const int N = 1e6 + 10;int f[N], ans;inline void dp() &#123; for(int i = 1; i &lt;= n; i++) for(int j = 1; j &lt;=n[i]; j++) for(int k = V; k &gt;= c[i]; k--) &#123; f[k] = max(f[k], f[k - c[i] + w[i]); &#125; for(int i = 0; i &lt;= V; i++) &#123; ans = max(ans, f[i]); &#125;&#125;","categories":[{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/categories/动态规划/"}],"tags":[{"name":"背包","slug":"背包","permalink":"http://yoursite.com/tags/背包/"}]},{"title":"线段树","slug":"线段树","date":"2019-10-11T16:00:00.000Z","updated":"2019-10-28T08:03:03.332Z","comments":true,"path":"2019/10/12/线段树/","link":"","permalink":"http://yoursite.com/2019/10/12/线段树/","excerpt":"","text":"定义线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。使用线段树可以快速的查找某一个节点在若干条线段中出现的次数，时间复杂度为 $O(logN)$。而未优化的空间复杂度为 $2N$，实际应用时一般还要开 $4N$ 的数组以免越界，因此有时需要离散化让空间压缩。 区间修改 区间查询123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;cstdio&gt;#define ls x &lt;&lt; 1#define rs x &lt;&lt; 1 | 1#define push_up(x) ans[x] = ans[ls] + ans[rs]typedef long long ll;const int N = 1e6 + 10;ll a[N], add[N * 4], ans[N * 4];inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;inline void build(int x, int l, int r) &#123; add[x] = 0; if(l == r) &#123; ans[x] = a[l]; return ; &#125; int mid = (l + r) &gt;&gt; 1; build(ls, l, mid); build(rs, mid + 1, r); push_up(x);&#125;inline void push_down(int x, int l, int r) &#123; int mid = (l + r) &gt;&gt; 1; add[ls] += add[x]; add[rs] += add[x]; ans[ls] += ( add[x] * (mid - l + 1) ); ans[rs] += ( add[x] * (r - mid) ); add[x] = 0;&#125;inline void addup(int nl, int nr, int l, int r, int x, ll k) &#123; if(nl &lt;= l &amp;&amp; r &lt;= nr) &#123; ans[x] += k * (r - l + 1); add[x] += k; return ; &#125; push_down(x, l, r); int mid = (l + r) &gt;&gt; 1; if(nl &lt;= mid) addup(nl, nr, l, mid, ls, k); if(mid + 1 &lt;= nr) addup(nl, nr, mid + 1, r, rs, k); push_up(x); &#125;inline ll query(int ql, int qr, int l, int r, int x) &#123; ll res = 0; if(ql &lt;= l &amp;&amp; r &lt;= qr) &#123; return ans[x]; &#125; int mid = (l + r) &gt;&gt; 1; push_down(x, l, r); if(ql &lt;= mid) res += query(ql, qr, l, mid, ls); if(mid + 1 &lt;= qr) res += query(ql, qr, mid + 1, r, rs); return res;&#125;int n, m;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= n; i++) a[i] = read(); build(1, 1, n); for(int i = 1; i &lt;= m; i++) &#123; int judge = read(), x = read(), y = read(); ll k; if(judge == 1) &#123; k = read(); addup(x, y, 1, n, 1, k); &#125; if(judge == 2) &#123; ll ans = query(x, y, 1, n, 1); printf(\"%lld\\n\", ans); &#125; &#125; return 0;&#125;","categories":[{"name":"高等数据结构","slug":"高等数据结构","permalink":"http://yoursite.com/categories/高等数据结构/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"http://yoursite.com/tags/线段树/"}]},{"title":"链表","slug":"链表","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-28T08:02:51.507Z","comments":true,"path":"2019/10/08/链表/","link":"","permalink":"http://yoursite.com/2019/10/08/链表/","excerpt":"","text":"定义链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到 $O(1)$ 的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是 $O(logn)$ 和 $O(1)$ 。 数组实现123456789101112131415161718192021222324252627282930struct Node &#123; int value; int prev, next;&#125;node[SIZE];inline void init() &#123; tot = 2; head = 1, tail = 2; node[head].next = tail; node[tail].prev = head;&#125; inline void insert() &#123; int q = ++tot; node[q].value = val; node[node[p].next].prev = q; node[q].next = node[p].next; node[p].next = q; node[q].prev = p;&#125;inline void eraser(int p, int val) &#123; node[node[p].next].next = node[p].next; node[node[p].next].prev = node[p].prev; &#125;inline void clear() &#123; memset(node, 0, sizeof node); head = tail = tot = 0;&#125; 指针实现12345678910111213141516171819202122232425262728293031323334struct Node &#123; int val; Node *prev, *next;&#125;;Node *head, *tail;inline void init()&#123; head = new Node(); tail = new Node(); head-&gt;next = tail; tail-&gt;prev = head;&#125;inline void insert(Node *p, int val) &#123; int *q = new Node(); q-&gt;value = val; p-&gt;next-&gt;prev = q; q-&gt;next = p-&gt;next; p-&gt;next = q; q-&gt;prev = p;&#125;inline void romove(Node *p) &#123; p-&gt;prev-&gt;next = p-&gt;next; p-&gt;next-&gt;prev = p-&gt;prev; delete = p;&#125;inline void recycle() &#123; while(head != tail) &#123; head = head-&gt;next; delete head-&gt;prev; &#125; delete tail;&#125; STL实现1234#include&lt;iostream&gt;#include&lt;list&gt;using namespace std;vector&lt;int&gt;V; 返回元素个数:1return V.size(); 在链表开头添加元素:1V.push_front(x); 在链表末尾添加元素:1V.push_back(x); 删除表头元素:1V.pop_front(); 删除表末尾元素:1V.pop_back(); 在表的位置 p 处 插入元素 x:1V.insert(p, x); 删除表中位置 p 处 的元素:1V.erase(p); 删除向量中所有元素:1V.clear();","categories":[{"name":"基本数据结构","slug":"基本数据结构","permalink":"http://yoursite.com/categories/基本数据结构/"}],"tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/链表/"}]},{"title":"最短路","slug":"最短路","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-28T08:03:28.929Z","comments":true,"path":"2019/10/08/最短路/","link":"","permalink":"http://yoursite.com/2019/10/08/最短路/","excerpt":"","text":"任意两点之间的最短路Floyed算法123456789101112131415161718192021222324252627282930313233343536#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 2e3 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w; &#125;int n, m;int d[N][N];int main() &#123; memset(d, 0x3f, sizeof d); n = read(); for(int int i = 1; i &lt;= n; i++) &#123; int x = read(), y = read(), z = read(); d[y][x] = min(d[y][x], z); &#125; for(int k = 1; k &lt;= n; k++) &#123; for(int i = 1; i &lt;= n; i++) &#123; for(int j = 1; k &lt;= n; j++) &#123; d[i][j] = max(d[i][j], d[i][k] + d[k][j]); &#125; &#125; &#125; for(int i = 1; i &lt;= n; i++) &#123; for(int j = 1; i &lt;= n; j++) &#123; printf(\"%d \", d[i][j]); &#125; puts(\"\"); &#125;&#125; 拓展:传递闭包1234567891011121314151617181920212223242526272829#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 2e3 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w; &#125;int n, m;int d[N][N];int main() &#123; n = read(); m = read(); for(int int i = 1; i &lt;= n; i++) d[i][i] = 1; for(int i = 1; i &lt;= n; i++) &#123; int x = raed(), y = read(); d[x][y] = d[y][x] = 1; &#125; for(int k = 1; k &lt;= n; k++) &#123; for(int i = 1; i &lt;= n; i++) &#123; for(int j = 1; k &lt;= n; j++) &#123; d[i][j] |= d[i][k] &amp; d[k][j]; &#125; &#125; &#125;&#125; 单源最短路dijkstra算法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 2e3 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w; &#125;int a[N][N], d[N], n, m;bool v[N];inline void dijkstra(int s) &#123; memset(d, 0x3f, sizeof d); memset(v, 0, sizeof v); d[s] = 0; for(int i = 1; i &lt; n; i++) &#123; int x = 0; for(int j = 1; j &lt;= n; j++) &#123; if(!v[j] &amp;&amp; (x == 0 || d[j] &lt; d[i])) &#123; x = j; &#125; v[x] = 1; &#125; &#125; for(int y = 1; y &lt;= n; y++) &#123; d[y] = min(d[y], d[x] + a[x][y]); &#125;&#125;int main() &#123; n = read(); m = read(); memset(a, 0x3f, sizeof a); for(int i = 1; i &lt;= n; i++)a[i][i] = 0; for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(), z = read(); a[x][y] = min(a[x][y], z); a[y][x] = min(a[y][x], z); &#125; int s = 1; dijkstra(s); for(int i = 1; i &lt;= n; i++) &#123; printf(\"%d\\n\", d[i]); &#125; return 0;&#125; 堆优化后的dijkstra123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w; &#125;int head[N], Next[N], ver[N], edge[N], tot;bool v[N];int n, m;priority_queue&lt; pair&lt;int, int &gt; &gt; q;inline void add(int x, int y, int z) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125;inline void dijkstra(int s) &#123; memset(d, 0x3f, sizeof d); memset(v, 0, suzeof v); d[s] = 0; q.push(make_pair(0, s)); while(q.size()) &#123; int x = q.top().second; q.pop(); if(v[x])continue; v[x] = 1; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(d[y] &gt; d[x] + z) &#123; d[y] = d[x] + z; q.push(make_pair(-d[y], y)); &#125; &#125; &#125;&#125; int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(), z = read(); add(x, y, z); add(y, x, z); &#125; int s = 1; dijkstra(s); for(int i = 1; i &lt;= n; i++) &#123; printf(\"%d \", d[i]); &#125; return 0;&#125; spfa1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w; &#125;int head[N], Next[N], ver[N], edge[N], tot;bool v[N];int n, m;queue&lt;int&gt; q;inline void add(int x, int y, int z) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125;inline void spfa(int s) &#123; memset(d, 0x3f, sizeof d); memset(v, 0, suzeof v); d[s] = 0; v[s] = 1; q.push(s); while(q.size()) &#123; int x = q.front(); q.pop(); v[x] = 0; for(int i = head[x]; i;i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(d[y] &gt; d[x] + z) &#123; d[y] = d[x] + z; if(!v[y]) &#123; q.push(y); v[y] = 1; &#125; &#125; &#125; &#125;&#125;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= m; i++) &#123; int x = read(), y = read(), z = read(); add(x, y, z); add(y, x, z); &#125; int s = 1; spfa(s); for(int i = 1; i &lt;= n; i++) &#123; printf(\"%d \", d[i]); &#125; return 0;&#125;","categories":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/categories/图论/"}],"tags":[{"name":"最短路","slug":"最短路","permalink":"http://yoursite.com/tags/最短路/"},{"name":"传递闭包","slug":"传递闭包","permalink":"http://yoursite.com/tags/传递闭包/"}]},{"title":"栈","slug":"栈","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-28T08:03:18.951Z","comments":true,"path":"2019/10/08/栈/","link":"","permalink":"http://yoursite.com/2019/10/08/栈/","excerpt":"","text":"定义栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为先进后出表。 数组实现1234567891011const int N = 1e6 + 10;int q[N], tot;inline void push(int x) &#123; q[++tot] = x;&#125;inline int top() &#123; return q[tot];&#125;inline void pop(int x) &#123; tot--;&#125; STL1234#include&lt;iostream&gt;#include&lt;stack&gt;using namespace std;stack&lt;int&gt; q; 压栈:1q.push(x); 弹栈:1q.pop(); 返回栈顶：1int x = q.top(); 返回栈的大小1int SIZE = q.size(); 判断是否为空1234inline bool is_empty() &#123; if(q.empty())return true; return false;&#125;","categories":[{"name":"基本数据结构","slug":"基本数据结构","permalink":"http://yoursite.com/categories/基本数据结构/"}],"tags":[{"name":"栈","slug":"栈","permalink":"http://yoursite.com/tags/栈/"}]},{"title":"约数","slug":"约数","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-28T08:03:14.618Z","comments":true,"path":"2019/10/08/约数/","link":"","permalink":"http://yoursite.com/2019/10/08/约数/","excerpt":"","text":"定义约数，又称因数。整数a除以整数b(b≠0) 除得的商正好是整数而没有余数，我们就说a能被b整除，或b能整除a。a称为b的倍数，b称为a的约数。在大学之前，”约数”一词所指的一般只限于正约数。约数和倍数都是二元关系的概念，不能孤立地说某个整数是约数或倍数。一个整数的约数是有限的。同时，它可以在特定情况下成为公约数。 欧几里得算法(辗转相除法)循环写法1234567891011inline int gcd(int a, int b) &#123; if(a &lt; b)swap(a, b); int res = 0; while(b) &#123; res = a % b; a = b; b = res; &#125; return b;&#125; 递归写法1234inline int gcd(int a, int b) &#123; return b ? gcd(b, a % b) : a;&#125;","categories":[{"name":"数论","slug":"数论","permalink":"http://yoursite.com/categories/数论/"}],"tags":[{"name":"约数","slug":"约数","permalink":"http://yoursite.com/tags/约数/"}]},{"title":"队列","slug":"队列","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-08T05:28:10.749Z","comments":true,"path":"2019/10/08/队列/","link":"","permalink":"http://yoursite.com/2019/10/08/队列/","excerpt":"","text":"定义队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。 数组实现1234567891011const int N = 1e6 + 10;int q[N], head, tail;inline void push(int x) &#123; q[++tail] = x;&#125;inline int top() &#123; return q[tail];&#125;inline void pop(int x) &#123; head++;&#125; STL实现1234#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;queue&lt;int&gt; q; 入队:1q.push(x); 出队:1q.pop(); 返回队头：1int x = q.front(); 返回队列的大小1int SIZE = q.size(); 判断是否为空1234inline bool is_empty() &#123; if(q.empty())return true; return false;&#125;","categories":[{"name":"基本数据结构","slug":"基本数据结构","permalink":"http://yoursite.com/categories/基本数据结构/"}],"tags":[{"name":"队列","slug":"队列","permalink":"http://yoursite.com/tags/队列/"}]},{"title":"质数","slug":"质数","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-28T08:03:24.582Z","comments":true,"path":"2019/10/08/质数/","link":"","permalink":"http://yoursite.com/2019/10/08/质数/","excerpt":"","text":"定义质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数；否则称为合数。 质数检验普通12345678inline bool prime(int n) &#123; if(n &lt; 2)return false; if(n == 2)return true; for(int i = 2; i * i &lt;= n; i++) &#123; if(n % i == 0)return false; &#125; return true;&#125; 简单优化123456789inline bool prime(int n) &#123; if(n &lt; 2)return false; if(n == 2)return true; if(n % 2 == 0)return false; for(int i = 3; i * i &lt;= n; i++) &#123; if(n % i == 0)return false; &#125; return true;&#125; 质数表埃氏筛法1234567891011bool v[N];inline int prime(int n) &#123; memset(v, true, v); v[0] = v[1] = 0; for(int i = 2; i &lt;= n; i++) &#123; if(!v[i])continue; for(int j = i; j &lt;= n / i; j++) &#123; v[j] = false; &#125; &#125;&#125; 欧拉筛法123456789101112131415161718int v[N], prime[N];inilne void primes(int n) &#123; memset(v, 0, sizeof v); int cnt = 0;//质数个数 for(int i = 2; i &lt;= n; i++) &#123; if(v[i])continue; v[i] = i; prime[++tot] = i; for(int j = 1; j &lt;= tot; j++) &#123; if(prime[j] &gt; v[i] || prime[j] &gt; n / i)break; v[i * prime[j]] = prime[j]; &#125; &#125; for(int i = 1; i &lt;= tot; i++) &#123; printf(\"%d\\n\", prime[i]); &#125; return &#125;","categories":[{"name":"数论","slug":"数论","permalink":"http://yoursite.com/categories/数论/"}],"tags":[{"name":"质数","slug":"质数","permalink":"http://yoursite.com/tags/质数/"}]},{"title":"优先队列","slug":"优先队列","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-28T08:03:10.570Z","comments":true,"path":"2019/10/08/优先队列/","link":"","permalink":"http://yoursite.com/2019/10/08/优先队列/","excerpt":"","text":"定义优先队列(priority queue)普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出 （first in, largest out）的行为特征。通常采用堆数据结构来实现。 数组实现12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 1e6 + 10;int heap[N], n;inline void up(int p) &#123; while(p &gt; 1) &#123; if(heap[p] &gt; heap[p / 2]) &#123; swap(heap[o], heap[p / 2]); p /= 2; &#125; &#125;&#125;inline void down(int p) &#123; int s = p * 2; if(s &lt; n &amp;&amp; heap[s] &lt; heap[s + 1])s++; while(s &lt;= n) &#123; if(heap[s] &gt; heap[n]) &#123; swap(heap[s], heap[p]); p = s; s = p * 2; &#125; else break; &#125;&#125; top123inline int gettop() &#123; return heap[1];&#125; pop()1234inline void pop() &#123; heap[1] = heap[n--]; down(1);&#125; STL12345#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;priority_queue&lt;int&gt;q;//大根堆priority_queue&lt;int,vector&lt;int&gt;, greater&lt;int&gt; &gt; q; 入队:1q.push(x); 出队:1q.pop(); 返回队头：1int x = q.top(); 返回队列的大小1int SIZE = q.size(); 判断是否为空1234inline bool is_empty() &#123; if(q.empty())return true; return false;&#125;","categories":[{"name":"基本数据结构","slug":"基本数据结构","permalink":"http://yoursite.com/categories/基本数据结构/"}],"tags":[{"name":"优先队列","slug":"优先队列","permalink":"http://yoursite.com/tags/优先队列/"}]},{"title":"并查集","slug":"并查集","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-08T05:41:35.767Z","comments":true,"path":"2019/10/08/并查集/","link":"","permalink":"http://yoursite.com/2019/10/08/并查集/","excerpt":"","text":"介绍并查集，在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。这一类问题近几年来反复出现在信息学的国际国内赛题中，其特点是看似并不复杂，但数据量极大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。并查集是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。常常在使用中以森林来表示。 操作123456789#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 1e6 + 10;int fa[N], n, m;inline void init() &#123; for(int i = 1; i &lt;= n + 10; i++)fa[i] = i;&#125; get1234inline int get(int x) &#123; if(fa[x] == x)return x; return fa[x] = get(fa[x]);&#125; merge123inline void merge(int x, int y) &#123; fa[get(x)] = get(y);&#125; same123inline bool same(int x, int y) &#123; return get(x) == get(y);&#125;","categories":[{"name":"高等数据结构","slug":"高等数据结构","permalink":"http://yoursite.com/categories/高等数据结构/"}],"tags":[{"name":"并查集","slug":"并查集","permalink":"http://yoursite.com/tags/并查集/"}]},{"title":"vector","slug":"vector","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-28T08:03:54.083Z","comments":true,"path":"2019/10/08/vector/","link":"","permalink":"http://yoursite.com/2019/10/08/vector/","excerpt":"","text":"定义向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。 vector的使用方法1234#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;vector&lt;int&gt;V; 返回向量个数:1return V.size(); 在向量末尾添加元素:1V.push_back(x); 删除向量最后一个元素:1V.pop_back(); 返回指向向量开头的迭代器:1return V.begin(); 返回指向向量末尾的迭代器:1return V.end(); 在向量的位置 p 处 插入元素 x:1V.insert(p, x); 删除向量位置 p 处 的元素:1V.erase(p); 删除向量中所有元素:1V.clear();","categories":[{"name":"基本数据结构","slug":"基本数据结构","permalink":"http://yoursite.com/categories/基本数据结构/"}],"tags":[{"name":"vector","slug":"vector","permalink":"http://yoursite.com/tags/vector/"}]},{"title":"快速幂","slug":"快速幂","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-28T08:02:46.621Z","comments":true,"path":"2019/10/08/快速幂/","link":"","permalink":"http://yoursite.com/2019/10/08/快速幂/","excerpt":"","text":"介绍顾名思义，快速幂就是快速算底数的 $n$ 次幂。其时间复杂度为 $O(log₂N)$， 与朴素的 $O(N)$ 相比效率有了极大的提高。(N 为幂)$x^{b} % mod$ 非递归12345678910const long long mod = 114514;inline long long mod_pow(long long x, long long b) &#123; long long res = 1; while(b) &#123; if(n &amp; 1) res = res * x % mod; x = x * x % mod; n &gt;&gt;= 1; &#125; return res;&#125; 递归1234567const long long mod = 114514;inline long long mod_pow(long long x, long long b) &#123; if(b == 0)return 1; long long res = mod_pow(x * x % mod, n / 2); if(n &amp; 1) res = res * x % mod; return res;&#125;","categories":[{"name":"数论","slug":"数论","permalink":"http://yoursite.com/categories/数论/"}],"tags":[{"name":"快速幂","slug":"快速幂","permalink":"http://yoursite.com/tags/快速幂/"}]},{"title":"烽火传递","slug":"烽火传递","date":"2019-09-24T16:00:00.000Z","updated":"2019-10-28T08:02:22.763Z","comments":true,"path":"2019/09/25/烽火传递/","link":"","permalink":"http://yoursite.com/2019/09/25/烽火传递/","excerpt":"","text":"题目描述烽火台是重要的军事防御设施，一般建在交通要道或险要处。一旦有军情发生，则白天用浓烟，晚上有火光传递军情。 在某两个城市之间有 $n$ 座烽火台，每个烽火台发出信号都有一定的代价。为了使情报准确传递，在连续 $m$ 个烽火台中至少要有一个发出信号。现在输入 $n,m$ 和每个烽火台的代价，请计算总共最少的代价在两城市之间来准确传递情报。 Input第一行是 $n,m$，表示 $n$ 个烽火台和连续烽火台数 $m$； 第二行 $n$ 个整数表示每个烽火台的代价 $a_i$。 Output输出仅一个整数，表示最小代价。 样例输入125 31 2 5 6 2 样例输出14 样例说明在第 $2,5$ 号烽火台上发信号。 数据范围对于全部数据，$1\\le n,m\\le 2\\times 10^5,1\\le a_i\\le 1000$。 Code:50分：12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;const int MAX_N = 1e6 + 10;const int INF = 99999999;int a[MAX_N], f[MAX_N];int n, m, ans = 99999999, cnt;int main() &#123; scanf(\"%d%d\", &amp;n, &amp;m); for(int i = 1; i &lt;= n; i++) &#123; scanf(\"%d\", &amp;a[i]); &#125; for(int i = 1; i &lt;= m; i++) &#123; f[i] = a[i]; &#125; for(int i = m + 1; i &lt;= n; i++) &#123; f[i] = INF; for(int j = i - m; j &lt;= i - 1; j++) &#123; f[i] = std::min(f[j] + a[i], f[i]); &#125; &#125; for(int i = n - m + 1; i &lt;= n; i++)ans = std::min(f[i], ans); printf(\"%d\\n\", ans); return 0;&#125; AC:123456789101112131415161718192021222324252627#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int MAX_N = 1e6 + 10;int n, m;int a[MAX_N], f[MAX_N];int q[MAX_N], l, r;int main() &#123; scanf(\"%d %d\", &amp;n, &amp;m); for(int i = 1; i &lt;= n; i++) &#123; scanf(\"%d\" ,&amp;a[i]); &#125; for(int i = 1; i &lt;= n; i++) &#123; while(l &lt;= r &amp;&amp; q[l] &lt; i - m)l++; f[i] = f[q[l]] + a[i]; while(l &lt;= r &amp;&amp; f[q[r]] &gt;= f[i])r--; q[++r] = i; &#125; int ans = 99986465; l = r = 1; for(int i = n - m + 1; i &lt;= n; i++) &#123; ans = min(ans, f[i]); &#125; printf(\"%d\\n\", ans); return 0;&#125;","categories":[{"name":"cpp","slug":"cpp","permalink":"http://yoursite.com/categories/cpp/"},{"name":"动态规划","slug":"cpp/动态规划","permalink":"http://yoursite.com/categories/cpp/动态规划/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/动态规划/"},{"name":"单调队列","slug":"单调队列","permalink":"http://yoursite.com/tags/单调队列/"}]},{"title":"堆蛋糕","slug":"堆蛋糕","date":"2019-08-30T16:00:00.000Z","updated":"2019-10-08T05:24:12.683Z","comments":true,"path":"2019/08/31/堆蛋糕/","link":"","permalink":"http://yoursite.com/2019/08/31/堆蛋糕/","excerpt":"","text":"题目描述其实moreD是一个十分犀利的蛋糕师。他最喜欢的食物就是蛋糕。 一天，他自己做出了n个圆柱状的蛋糕，每个蛋糕都有一个底面圆的半径Ri。高度都是一样的。 moreD在开始享用他的蛋糕大餐之前忽然觉得，圆柱状的蛋糕没有什么诱惑力。moreD看到了别人结婚用的蛋糕都是很多很多层的，那样的蛋糕才比较给力。但是堆太多层的蛋糕比较困难，于是moreD想要堆出许多三层的蛋糕，再开始自己的蛋糕大餐。 当然，作为蛋糕师，moreD在堆蛋糕的时候不会对蛋糕的形状有任何破坏，而且，moreD希望三层蛋糕的半径从上往下严格递增。这才是一个普通的好蛋糕。 moreD在考虑一个十分重要的问题，最多可以堆出多少三层蛋糕呢？ 输入第一行仅包含一个整数n，表示蛋糕的数量。 接下来n个整数，表示每个蛋糕半径的大小Ri。 输出输出一行仅包含一个整数，表示最多可以做成多少个蛋糕。 Sample Input1261 2 3 4 3 2 Sample Output12 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;cstdio&gt;const int MAX_N = 3e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int CntNum[MAX_N];int CntFirst, CntSecond, ThreePieces, n, ans;int main() &#123; n = read(); ThreePieces = n / 3; for(int i = 1; i &lt;= n; i++) &#123; int x = read(); CntNum[x]++; &#125; for(int i = 1; i &lt;= n; i++) &#123; if(CntNum[i] &gt; CntFirst) &#123; CntSecond = CntFirst; CntFirst = CntNum[i]; &#125; else if(CntNum[i] &gt; CntSecond) &#123; CntSecond = CntNum[i]; &#125; &#125; if(CntFirst &gt; ThreePieces &amp;&amp; CntSecond &lt;= ThreePieces) &#123; ans = (n - CntFirst) / 2; &#125; else if(CntFirst &gt; ThreePieces &amp;&amp; CntSecond &gt; ThreePieces) &#123; ans = n - CntFirst - CntSecond; &#125; else ans = CntFirst; printf(\"%d\\n\", ans); return 0; &#125;","categories":[{"name":"cpp","slug":"cpp","permalink":"http://yoursite.com/categories/cpp/"}],"tags":[{"name":"贪心","slug":"贪心","permalink":"http://yoursite.com/tags/贪心/"}]},{"title":"二分笔记","slug":"二分笔记","date":"2019-08-24T16:00:00.000Z","updated":"2019-10-08T05:28:12.147Z","comments":true,"path":"2019/08/25/二分笔记/","link":"","permalink":"http://yoursite.com/2019/08/25/二分笔记/","excerpt":"","text":"引言&nbsp; 二分是一种常用而且非常精妙的算法，常常是我们解决问题的突破口。二分的基本用途是在单调序列或单调函数中做查找操作。因此，当问题的答案具有单调性时，就可以通过二分把求解转化为判定（根据复杂度理论，判定的难度小于求解）。进一步的，我们还可以通过三分解决单峰函数的极值以及相关问题。 二分写法12345678inline int Erfen(int x) &#123; while( l &lt;= r) &#123; int mid = ( l + r) &gt;&gt; 1; if(check(mid))ans = mid, l = mid + 1; else r = mid - 1; &#125; return l;&#125; 二分题型二分查找&nbsp; 用具有单调性的布尔表达式求解分界点，比如在有序数列中求数字$x$的排名。&nbsp;在单调递增序列 a 中查找 ≥x 的数中最小的一个(即x 或 x 的后继)1234567inline Erfen(int x) &#123; while(l &lt; r) &#123; int mid = (l + r) &gt;&gt; 1; if(a[mid] &gt;= x)r = mid; else l = mid + 1; &#125; return a[l];&#125; 在单调递增序列 a 中查找 ≤x 的数中最大的一个(即x 或 x 的前驱)1234567inline Erfen(int x) &#123; while(l &lt; r) &#123; int mid = (l + r + 1) &gt;&gt; 1; if(a[mid] &lt;= x)l = mid; else r = mid - 1; &#125; return a[l];&#125;","categories":[{"name":"read","slug":"read","permalink":"http://yoursite.com/categories/read/"}],"tags":[{"name":"二分","slug":"二分","permalink":"http://yoursite.com/tags/二分/"}]},{"title":"过路费","slug":"过路费","date":"2019-07-21T16:00:00.000Z","updated":"2019-10-28T08:02:33.516Z","comments":true,"path":"2019/07/22/过路费/","link":"","permalink":"http://yoursite.com/2019/07/22/过路费/","excerpt":"","text":"题目描述在某个遥远的国家里，有n个城市,编号分别为1，2，3，…，n。这个国家的政府修建了m条双向道路，每条道路连接着两个城市。政府规定从城市S到城市T需要收取的过路费为所经过城市之间道路长度的最大值。如：A到B长度为2，B到C长度为3，那么开车从A经过B到C需要上交的过路费为3。 佳佳是个做生意的人，需要经常开车从任意一个城市到另外一个城市，因此他需要频繁地上交过路费，由于忙于做生意，所以他无时间来寻找交过路费最低的行驶路线。然而，当他交的过路费越多他的心情就变得越糟糕。作为秘书的你，需要每次根据佳佳开车的起止城市，提供给他从开始城市到达目标城市，最少需要上交多少过路费。 Input第一行是两个整数n 和m，分别表示城市的个数以及道路的条数。 接下来m行，每行包含三个整数 a，b，w（1≤a，b≤n，0≤w≤109），表示a与b之间有一条长度为w的道路。 接着有一行为一个整数q，表示佳佳发出的询问个数。 再接下来q行，每一行包含两个整数S，T（1≤S,T≤n，S≠T）, 表示开始城市S和目标城市T。 Output输出文件共q行，每行一个整数，分别表示每个询问需要上交的最少过路费用。输入数据保证所有的城市都是连通的。 Sample Input1234567894 51 2 101 3 201 4 1002 4 303 4 1021 44 1 Sample Output122020 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N = 2e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w; &#125;int head[N], Next[N], edge[N], ver[N], tot;int f[N][21], g[N][21], d[N], n, m, root;inline void add(int x, int y, int z) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125;struct node&#123; int a, b, val;&#125;t[N];bool cmp(node A, node B) &#123; return A.val &lt;= B.val;&#125;int fa[N];inline int get(int x) &#123; if(fa[x] == x)return x; return fa[x] = get(fa[x]);&#125;void dfs(int x, int father) &#123; d[x] = d[father] + 1; for(int i = 0; i &lt;= 14; i++) &#123; f[x][i + 1] = f[ f[x][i] ][i]; g[x][i + 1] = max(g[x][i], g[ f[x][i] ][i]); &#125; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(y == father)continue; f[y][0] = x; g[y][0] = z; dfs(y, x); &#125;&#125;int LCA(int x, int y) &#123; int ans = 0; if(d[x] &lt; d[y])swap(x, y); if(x == y)return ans; for(int i = 15; i &gt;= 0; i--) &#123; if(d[f[x][i]] &gt;= d[y]) &#123; ans = max(ans, g[x][i]); x = f[x][i]; if(x == y)return ans; &#125; &#125; for(int i = 15; i &gt;= 0; i--) &#123; if(f[x][i] != f[y][i]) &#123; ans = max(ans, g[x][i]); ans = max(ans, g[y][i]); x = f[x][i]; y = f[y][i]; &#125; &#125; return max(ans, max(g[x][0], g[y][0]));&#125;int main() &#123; n = read(); m = read(); for(int i = 1; i &lt;= n; i++)fa[i] = i; for(int i = 1; i &lt;= m; i++) &#123; t[i].a = read(), t[i].b = read(), t[i].val = read(); &#125; sort(t + 1, t + 1 + m, cmp); for(int i = 1; i &lt;= m; i++) &#123; int x = get(t[i].a), y = get(t[i].b); if(x == y)continue; fa[x] = y; add(t[i].a, t[i].b, t[i].val); add(t[i].b, t[i].a, t[i].val); &#125; dfs(1, 0); int Q = read(); for(int i = 1; i &lt;= Q; i++) &#123; int x = read(), y = read(); printf(\"%d\\n\", LCA(x, y)); &#125; return 0;&#125;","categories":[{"name":"cpp","slug":"cpp","permalink":"http://yoursite.com/categories/cpp/"}],"tags":[{"name":"LCA","slug":"LCA","permalink":"http://yoursite.com/tags/LCA/"},{"name":"最小生成树","slug":"最小生成树","permalink":"http://yoursite.com/tags/最小生成树/"}]},{"title":"铺设道路","slug":"铺设道路","date":"2019-07-13T16:00:00.000Z","updated":"2019-10-28T08:02:54.594Z","comments":true,"path":"2019/07/14/铺设道路/","link":"","permalink":"http://yoursite.com/2019/07/14/铺设道路/","excerpt":"","text":"题目描述春春是一名道路工程师，负责铺设一条长度为 n 的道路。 铺设道路的主要工作是填平下陷的地表。整段道路可以看作是 n 块首尾相连的区域，一开始，第 i 块区域下陷的深度为 di。 春春每天可以选择一段连续区间 [L, R] ，填充这段区间中的每块区域，让其下陷深度减少 1。在选择区间时，需要保证，区间内的每块区域在填充前下陷深度均不为 0 。春春希望你能帮他设计一种方案，可以在最短的时间内将整段道路的下陷深度都变为 0 。 输入格式输入文件包含两行，第一行包含一个整数 n，表示道路的长度。 第二行包含 n 个整数，相邻两数间用一个空格隔开，第 i 个整数为 di 。 输出格式输出文件仅包含一个整数，即最少需要多少天才能完成任务。 Sample Input1264 3 2 5 3 5 Sample Output19 Code：12345678910111213141516171819202122232425262728#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt; #include&lt;cmath&gt;using namespace std;const int MAX_N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int n, x, y, ans;int main()&#123; freopen(\"road.in\", \"r\", stdin); freopen(\"road.out\", \"w\", stdout); n = read(); for(int i = 1; i &lt;= n; i++) &#123; x = read(); if(x &gt; y)ans += x - y; swap(x, y); &#125; printf(\"%d\\n\", ans); return 0;&#125;","categories":[{"name":"noip2018复盘","slug":"noip2018复盘","permalink":"http://yoursite.com/categories/noip2018复盘/"}],"tags":[{"name":"贪心","slug":"贪心","permalink":"http://yoursite.com/tags/贪心/"},{"name":"noip2018","slug":"noip2018","permalink":"http://yoursite.com/tags/noip2018/"}]},{"title":"货币系统","slug":"货币系统","date":"2019-07-12T16:00:00.000Z","updated":"2019-10-28T08:02:39.132Z","comments":true,"path":"2019/07/13/货币系统/","link":"","permalink":"http://yoursite.com/2019/07/13/货币系统/","excerpt":"","text":"题目描述在网友的国度中共有 n 种不同面额的货币，第 i 种货币的面额为 a[i]，你可以假设每一种货币都有无穷多张。为了方便，我们把货币种数为 n、面额数组为 a[1..n]的货币系统记作 (n,a)。在一个完善的货币系统中，每一个非负整数的金额 x 都应该可以被表示出，即对每一个非负整数 x，都存在 n 个非负整数 t[i] 满足 a[i]× t[i] 的和为 x。然而，在网友的国度中，货币系统可能是不完善的，即可能存在金额 x 不能被该货币系统表示出。例如在货币系统 n=3, a=[2,5,9] 中，金额 1,3 就无法被表示出来。两个货币系统 (n,a) 和 (m,b) 是等价的，当且仅当对于任意非负整数 x，它要么均可以被两个货币系统表出，要么不能被其中任何一个表出。现在网友们打算简化一下货币系统。他们希望找到一个货币系统 (m,b)，满足(m,b) 与原来的货币系统 (n,a) 等价，且 m 尽可能的小。他们希望你来协助完成这个艰巨的任务：找到最小的 m。 输入格式输入文件的第一行包含一个整数 T，表示数据的组数。接下来按照如下格式分别给出 T 组数据。每组数据的第一行包含一个正整数 n。接下来一行包含 n 个由空格隔开的正整数a[i]。 输出格式输出文件共有 T 行，对于每组数据，输出一行一个正整数，表示所有与 (n,a) 等价的货币系统 (m,b) 中，最小的 m。 Sample Input12345243 19 10 6511 29 13 19 17 Sample Output1225 数据范围与提示在第一组数据中，货币系统 (2, [3,10]) 和给出的货币系统 (n, a) 等价，并可以验证不存在 m &lt; 2 的等价的货币系统，因此答案为 2。在第二组数据中，可以验证不存在 m &lt; n 的等价的货币系统，因此答案为 5。 对于 100% 的数据，满足 1 ≤ T ≤ 20, n,a[i] ≥ 1。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt; #include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;const int MAX_N = 1e6 + 10;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int T, a[MAX_N], b[MAX_N], n, m;bool v[MAX_N];int main() &#123; freopen(\"money.in\", \"r\", stdin); freopen(\"money.out\", \"w\", stdout); T = read(); while(T--) &#123; int ans = 0; memset(a, 0 ,sizeof(a)); memset(b, 0 ,sizeof(b)); memset(v, 0 ,sizeof(v)); n = read(); for(int i = 1; i &lt;= n; i++)a[i] = read(); sort(a + 1, a + 1 + n); if(a[1] == 1) &#123; printf(\"1\\n\"); continue; &#125; for(int i = 1; i &lt;= n; i++) &#123; if(v[a[i]])continue; v[a[i]] = 1; for(int j = 1; j + a[i] &lt;= a[n]; j++) &#123; if(!v[j])continue; v[a[i] + j] = 1; &#125; ans++; &#125; printf(\"%d\\n\", ans); &#125; return 0;&#125;","categories":[{"name":"noip2018复盘","slug":"noip2018复盘","permalink":"http://yoursite.com/categories/noip2018复盘/"}],"tags":[{"name":"筛法","slug":"筛法","permalink":"http://yoursite.com/tags/筛法/"},{"name":"noip2018","slug":"noip2018","permalink":"http://yoursite.com/tags/noip2018/"}]},{"title":"树的直径","slug":"树的直径","date":"2019-07-12T16:00:00.000Z","updated":"2019-10-28T08:02:57.415Z","comments":true,"path":"2019/07/13/树的直径/","link":"","permalink":"http://yoursite.com/2019/07/13/树的直径/","excerpt":"","text":"给定一棵树，树中每条边都有一个权值，树中两点之间的距离定义为连接两点的路径边权之和。树中最远的两个节点之间的距离被称为树的直径，连接这两点的路径被称为树的最长链。后者通常也可称为直径，即直径是一个数值概念，也可代指一条路径。树的直径通常有两种求法，时间复杂度均为O(n)。 dp求树的直径12345678910void dp(int x) &#123; v[x] = 1; for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(v[y])continue; dp(y); ans = max(ans, d[x] + d[y] + z); d[x] = max(d[x], d[y] + z); &#125;&#125; BFS求树的直径12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;queue&gt;using namespace std;const int N = 1e6 + 10;const int INF = 1061109567;inline int read() &#123; int s = 0, w = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')w= -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')s = s * 10 + ch - '0', ch = getchar(); return s * w;&#125;int head[N], ver[N], Next[N], edge[N], tot;int v[N], d[N];inline void add(int x, int y, int z) &#123; ver[++tot] = y; edge[tot] = z; Next[tot] = head[x]; head[x] = tot;&#125;int pos, ans;inline void bfs(int s) &#123; memset(d, 0, sizeof(d)); memset(v, 0, sizeof(v)); queue&lt;int&gt;q; q.push(s); v[s] = 1; while(q.size()) &#123; int x = q.front(); q.pop(); for(int i = head[x]; i; i = Next[i]) &#123; int y = ver[i], z = edge[i]; if(v[y])continue; v[y] = 1; d[y] = d[x] + z; q.push(y); &#125; pos = x; &#125;&#125;int n, m;int main() &#123; n = read(); for(int i = 1; i &lt; n; i++) &#123; int x = read(), y = read(), z = 1; add(x, y, z); add(y, x, z); &#125; bfs(1); bfs(pos); printf(\"%d\\n\", d[pos]); return 0;&#125;","categories":[{"name":"模板","slug":"模板","permalink":"http://yoursite.com/categories/模板/"}],"tags":[{"name":"树的直径","slug":"树的直径","permalink":"http://yoursite.com/tags/树的直径/"},{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/图论/"}]}]}